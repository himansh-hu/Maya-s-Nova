{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# 3D Print Wonders E-commerce Platform\n\n## Overview\n\n3D Print Wonders is a modern, full-stack e-commerce web application dedicated to selling next-generation 3D-printed gadgets, tech accessories, home decor, and collectibles. The platform emphasizes customization and interactivity, featuring 3D product visualization, real-time customization tools, and a sleek user experience designed for tech enthusiasts, hobbyists, and collectors.\n\nThe application provides a comprehensive shopping experience with features like interactive 3D product viewers, customization studios, user authentication, shopping cart management, and a responsive design optimized for all devices.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Framework**: Tailwind CSS with ShadCN/UI components for consistent, modern design\n- **Component Library**: Radix UI primitives for accessible, unstyled components\n- **State Management**: React Context API for global state (Auth, Cart, Currency, Theme)\n- **Data Fetching**: TanStack Query (React Query) for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **3D Visualization**: Three.js integration for interactive 3D product viewers\n- **Styling**: CSS custom properties for theming with dark/light mode support\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for type safety across the entire stack\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL (configured for Neon serverless)\n- **API Design**: RESTful API with structured error handling and logging middleware\n- **Development Setup**: Vite middleware integration for seamless dev experience\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Drizzle ORM\n- **Schema**: Comprehensive e-commerce schema including users, products, categories, cart items, orders, and reviews\n- **Migrations**: Drizzle Kit for database schema migrations\n- **Type Safety**: Shared schema definitions between frontend and backend using Drizzle Zod\n\n### Authentication and Authorization\n- **User Management**: Email/password authentication with user profiles\n- **Session Handling**: Context-based authentication state management\n- **Registration/Login**: Secure user registration and login flows\n- **Protected Routes**: Authentication checks for user-specific features\n\n### Key Design Patterns\n- **Monorepo Structure**: Organized into `client/`, `server/`, and `shared/` directories\n- **Shared Types**: Common schema and type definitions in `shared/` for consistency\n- **Component Composition**: Reusable UI components with proper separation of concerns\n- **Context Providers**: Global state management for auth, cart, currency, and theme\n- **Custom Hooks**: Reusable hooks for data fetching and state management\n- **Error Boundaries**: Comprehensive error handling throughout the application\n\n### Development Features\n- **Hot Reload**: Vite HMR for instant development feedback\n- **Type Safety**: End-to-end TypeScript with strict mode enabled\n- **Code Quality**: ESLint and Prettier integration\n- **Path Aliases**: Clean import paths using TypeScript path mapping\n- **Environment Config**: Environment-based configuration management\n\n## External Dependencies\n\n### Core Frontend Dependencies\n- **React Ecosystem**: React 18, React DOM, React Helmet for SEO\n- **UI Components**: Radix UI primitives, Lucide React icons\n- **Styling**: Tailwind CSS, PostCSS, Autoprefixer\n- **Forms**: React Hook Form, Hookform Resolvers\n- **Validation**: Zod for schema validation\n- **State Management**: TanStack React Query\n- **Routing**: Wouter for lightweight routing\n- **3D Graphics**: Three.js (configured for future integration)\n- **Utilities**: Class Variance Authority, clsx, date-fns\n\n### Backend Dependencies\n- **Server Framework**: Express.js with TypeScript\n- **Database**: Drizzle ORM, @neondatabase/serverless\n- **Session Management**: connect-pg-simple for PostgreSQL sessions\n- **Development**: tsx for TypeScript execution, esbuild for production builds\n\n### Development Tools\n- **Build System**: Vite with React plugin\n- **TypeScript**: Full TypeScript setup with strict configuration\n- **Database Tools**: Drizzle Kit for migrations and schema management\n- **Replit Integration**: Replit-specific plugins for development environment\n\n### Third-Party Services\n- **Database Hosting**: Neon (serverless PostgreSQL)\n- **Development Environment**: Replit with custom configuration\n- **CDN**: Configured for external asset delivery\n- **Payment Processing**: Stripe integration (configured for future implementation)\n\nThe application is designed to be scalable and maintainable, with a clear separation between frontend and backend concerns, comprehensive type safety, and modern development practices throughout the stack.","size_bytes":5090},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport { \n  insertUserSchema, \n  insertProductSchema,\n  insertCategorySchema,\n  insertCartItemSchema,\n  insertOrderSchema,\n  insertOrderItemSchema,\n  insertReviewSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Prefix all routes with /api\n  const apiRouter = \"/api\";\n\n  // Auth Routes\n  app.post(`${apiRouter}/auth/register`, async (req: Request, res: Response) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(409).json({ message: \"User with this email already exists\" });\n      }\n      \n      const newUser = await storage.createUser(userData);\n      \n      // Don't return the password\n      const { password, ...userWithoutPassword } = newUser;\n      \n      return res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid user data\", errors: error.errors });\n      }\n      return res.status(500).json({ message: \"Failed to register user\" });\n    }\n  });\n\n  app.post(`${apiRouter}/auth/login`, async (req: Request, res: Response) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n      \n      const user = await storage.getUserByEmail(email);\n      \n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      // Don't return the password\n      const { password: _, ...userWithoutPassword } = user;\n      \n      return res.status(200).json(userWithoutPassword);\n    } catch (error) {\n      return res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Category Routes\n  app.get(`${apiRouter}/categories`, async (_req: Request, res: Response) => {\n    try {\n      const categories = await storage.getCategories();\n      return res.status(200).json(categories);\n    } catch (error) {\n      return res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.get(`${apiRouter}/categories/:slug`, async (req: Request, res: Response) => {\n    try {\n      const { slug } = req.params;\n      const category = await storage.getCategoryBySlug(slug);\n      \n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      \n      return res.status(200).json(category);\n    } catch (error) {\n      return res.status(500).json({ message: \"Failed to fetch category\" });\n    }\n  });\n\n  // Product Routes\n  app.get(`${apiRouter}/products`, async (req: Request, res: Response) => {\n    try {\n      const { \n        limit = \"12\", \n        offset = \"0\", \n        category, \n        featured, \n        search,\n        minPrice,\n        maxPrice,\n        sort \n      } = req.query;\n      \n      const options: {\n        limit?: number;\n        offset?: number;\n        categoryId?: number;\n        featured?: boolean;\n        search?: string;\n        minPrice?: number;\n        maxPrice?: number;\n        sort?: string;\n      } = {\n        limit: parseInt(limit as string),\n        offset: parseInt(offset as string)\n      };\n      \n      // Add optional filters if provided\n      if (category) {\n        const categoryObj = await storage.getCategoryBySlug(category as string);\n        if (categoryObj) {\n          options.categoryId = categoryObj.id;\n        }\n      }\n      \n      if (featured !== undefined) {\n        options.featured = featured === 'true';\n      }\n      \n      if (search) {\n        options.search = search as string;\n      }\n      \n      if (minPrice) {\n        options.minPrice = parseFloat(minPrice as string);\n      }\n      \n      if (maxPrice) {\n        options.maxPrice = parseFloat(maxPrice as string);\n      }\n      \n      if (sort) {\n        options.sort = sort as string;\n      }\n      \n      const { products, total } = await storage.getProducts(options);\n      \n      return res.status(200).json({\n        products,\n        pagination: {\n          total,\n          limit: options.limit,\n          offset: options.offset\n        }\n      });\n    } catch (error) {\n      return res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(`${apiRouter}/products/:slug`, async (req: Request, res: Response) => {\n    try {\n      const { slug } = req.params;\n      const product = await storage.getProductBySlug(slug);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      return res.status(200).json(product);\n    } catch (error) {\n      return res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Featured Products\n  app.get(`${apiRouter}/products/featured`, async (_req: Request, res: Response) => {\n    try {\n      const { products } = await storage.getProducts({ featured: true, limit: 8 });\n      return res.status(200).json(products);\n    } catch (error) {\n      return res.status(500).json({ message: \"Failed to fetch featured products\" });\n    }\n  });\n\n  // Product Reviews\n  app.get(`${apiRouter}/products/:id/reviews`, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const productId = parseInt(id);\n      \n      if (isNaN(productId)) {\n        return res.status(400).json({ message: \"Invalid product ID\" });\n      }\n      \n      const product = await storage.getProduct(productId);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      const reviews = await storage.getReviews(productId);\n      return res.status(200).json(reviews);\n    } catch (error) {\n      return res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.post(`${apiRouter}/products/:id/reviews`, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const productId = parseInt(id);\n      \n      if (isNaN(productId)) {\n        return res.status(400).json({ message: \"Invalid product ID\" });\n      }\n      \n      const product = await storage.getProduct(productId);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      const reviewData = insertReviewSchema.parse({\n        ...req.body,\n        productId\n      });\n      \n      const newReview = await storage.createReview(reviewData);\n      return res.status(201).json(newReview);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid review data\", errors: error.errors });\n      }\n      return res.status(500).json({ message: \"Failed to create review\" });\n    }\n  });\n\n  // Cart Routes\n  app.get(`${apiRouter}/cart/:userId`, async (req: Request, res: Response) => {\n    try {\n      const { userId } = req.params;\n      const userIdNum = parseInt(userId);\n      \n      if (isNaN(userIdNum)) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n      \n      const user = await storage.getUser(userIdNum);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const cartItems = await storage.getCartItems(userIdNum);\n      \n      // Get product details for each cart item\n      const cartItemsWithDetails = await Promise.all(\n        cartItems.map(async (item) => {\n          const product = await storage.getProduct(item.productId);\n          return {\n            ...item,\n            product\n          };\n        })\n      );\n      \n      return res.status(200).json(cartItemsWithDetails);\n    } catch (error) {\n      return res.status(500).json({ message: \"Failed to fetch cart items\" });\n    }\n  });\n\n  app.post(`${apiRouter}/cart`, async (req: Request, res: Response) => {\n    try {\n      const cartItemData = insertCartItemSchema.parse(req.body);\n      \n      // Check if user exists\n      const user = await storage.getUser(cartItemData.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Check if product exists\n      const product = await storage.getProduct(cartItemData.productId);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      // Check if product is in stock\n      if (product.stock < cartItemData.quantity) {\n        return res.status(400).json({ message: \"Not enough stock available\" });\n      }\n      \n      // Check if item already in cart\n      const existingItem = await storage.getCartItemByUserAndProduct(\n        cartItemData.userId,\n        cartItemData.productId\n      );\n      \n      if (existingItem) {\n        // Update quantity\n        const updatedItem = await storage.updateCartItem(\n          existingItem.id,\n          { quantity: existingItem.quantity + cartItemData.quantity }\n        );\n        \n        return res.status(200).json(updatedItem);\n      } else {\n        // Create new cart item\n        const newCartItem = await storage.createCartItem(cartItemData);\n        return res.status(201).json(newCartItem);\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid cart item data\", errors: error.errors });\n      }\n      return res.status(500).json({ message: \"Failed to add item to cart\" });\n    }\n  });\n\n  app.put(`${apiRouter}/cart/:id`, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const cartItemId = parseInt(id);\n      \n      if (isNaN(cartItemId)) {\n        return res.status(400).json({ message: \"Invalid cart item ID\" });\n      }\n      \n      const { quantity } = req.body;\n      \n      if (typeof quantity !== 'number' || quantity < 1) {\n        return res.status(400).json({ message: \"Quantity must be a positive number\" });\n      }\n      \n      const cartItem = await storage.getCartItem(cartItemId);\n      \n      if (!cartItem) {\n        return res.status(404).json({ message: \"Cart item not found\" });\n      }\n      \n      // Check if product has enough stock\n      const product = await storage.getProduct(cartItem.productId);\n      if (!product || product.stock < quantity) {\n        return res.status(400).json({ message: \"Not enough stock available\" });\n      }\n      \n      const updatedCartItem = await storage.updateCartItem(cartItemId, { quantity });\n      return res.status(200).json(updatedCartItem);\n    } catch (error) {\n      return res.status(500).json({ message: \"Failed to update cart item\" });\n    }\n  });\n\n  app.delete(`${apiRouter}/cart/:id`, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const cartItemId = parseInt(id);\n      \n      if (isNaN(cartItemId)) {\n        return res.status(400).json({ message: \"Invalid cart item ID\" });\n      }\n      \n      const cartItem = await storage.getCartItem(cartItemId);\n      \n      if (!cartItem) {\n        return res.status(404).json({ message: \"Cart item not found\" });\n      }\n      \n      await storage.deleteCartItem(cartItemId);\n      return res.status(200).json({ message: \"Cart item removed successfully\" });\n    } catch (error) {\n      return res.status(500).json({ message: \"Failed to remove cart item\" });\n    }\n  });\n\n  app.delete(`${apiRouter}/cart/user/:userId`, async (req: Request, res: Response) => {\n    try {\n      const { userId } = req.params;\n      const userIdNum = parseInt(userId);\n      \n      if (isNaN(userIdNum)) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n      \n      const user = await storage.getUser(userIdNum);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      await storage.clearCart(userIdNum);\n      return res.status(200).json({ message: \"Cart cleared successfully\" });\n    } catch (error) {\n      return res.status(500).json({ message: \"Failed to clear cart\" });\n    }\n  });\n\n  // Order Routes\n  app.get(`${apiRouter}/orders/:userId`, async (req: Request, res: Response) => {\n    try {\n      const { userId } = req.params;\n      const userIdNum = parseInt(userId);\n      \n      if (isNaN(userIdNum)) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n      \n      const user = await storage.getUser(userIdNum);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const orders = await storage.getOrders(userIdNum);\n      \n      // Get order items for each order\n      const ordersWithItems = await Promise.all(\n        orders.map(async (order) => {\n          const items = await storage.getOrderItems(order.id);\n          return {\n            ...order,\n            items\n          };\n        })\n      );\n      \n      return res.status(200).json(ordersWithItems);\n    } catch (error) {\n      return res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(`${apiRouter}/orders/:userId/:orderId`, async (req: Request, res: Response) => {\n    try {\n      const { userId, orderId } = req.params;\n      const userIdNum = parseInt(userId);\n      const orderIdNum = parseInt(orderId);\n      \n      if (isNaN(userIdNum) || isNaN(orderIdNum)) {\n        return res.status(400).json({ message: \"Invalid user ID or order ID\" });\n      }\n      \n      const user = await storage.getUser(userIdNum);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const order = await storage.getOrder(orderIdNum);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      if (order.userId !== userIdNum) {\n        return res.status(403).json({ message: \"Unauthorized access to order\" });\n      }\n      \n      const orderItems = await storage.getOrderItems(orderIdNum);\n      \n      // Get product details for each order item\n      const orderItemsWithDetails = await Promise.all(\n        orderItems.map(async (item) => {\n          const product = await storage.getProduct(item.productId);\n          return {\n            ...item,\n            product\n          };\n        })\n      );\n      \n      return res.status(200).json({\n        ...order,\n        items: orderItemsWithDetails\n      });\n    } catch (error) {\n      return res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  app.post(`${apiRouter}/orders`, async (req: Request, res: Response) => {\n    try {\n      const orderData = insertOrderSchema.parse(req.body);\n      \n      // Check if user exists\n      const user = await storage.getUser(orderData.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Get cart items\n      const cartItems = await storage.getCartItems(orderData.userId);\n      \n      if (cartItems.length === 0) {\n        return res.status(400).json({ message: \"Cart is empty\" });\n      }\n      \n      // Validate cart items and calculate total\n      let total = 0;\n      const validatedItems = await Promise.all(\n        cartItems.map(async (item) => {\n          const product = await storage.getProduct(item.productId);\n          \n          if (!product) {\n            throw new Error(`Product with ID ${item.productId} not found`);\n          }\n          \n          if (product.stock < item.quantity) {\n            throw new Error(`Not enough stock for ${product.name}`);\n          }\n          \n          const price = product.salePrice || product.price;\n          total += price * item.quantity;\n          \n          return {\n            productId: item.productId,\n            quantity: item.quantity,\n            price,\n            customizations: item.customizations\n          };\n        })\n      );\n      \n      // Create order\n      const newOrder = await storage.createOrder({\n        ...orderData,\n        total,\n        status: \"pending\"\n      });\n      \n      // Create order items\n      const orderItems = await Promise.all(\n        validatedItems.map(item => \n          storage.createOrderItem({\n            orderId: newOrder.id,\n            productId: item.productId,\n            quantity: item.quantity,\n            price: item.price,\n            customizations: item.customizations\n          })\n        )\n      );\n      \n      // Update product stock\n      await Promise.all(\n        validatedItems.map(async (item) => {\n          const product = await storage.getProduct(item.productId);\n          if (product) {\n            await storage.updateProduct(product.id, {\n              stock: product.stock - item.quantity\n            });\n          }\n        })\n      );\n      \n      // Clear cart\n      await storage.clearCart(orderData.userId);\n      \n      return res.status(201).json({\n        ...newOrder,\n        items: orderItems\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid order data\", errors: error.errors });\n      }\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      return res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  // Setup HTTP server\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":17613},"server/storage.ts":{"content":"import {\n  users, User, InsertUser, \n  products, Product, InsertProduct,\n  categories, Category, InsertCategory,\n  cartItems, CartItem, InsertCartItem,\n  orders, Order, InsertOrder,\n  orderItems, OrderItem, InsertOrderItem,\n  reviews, Review, InsertReview\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, userData: Partial<InsertUser>): Promise<User | undefined>;\n  \n  // Category operations\n  getCategories(): Promise<Category[]>;\n  getCategory(id: number): Promise<Category | undefined>;\n  getCategoryBySlug(slug: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  \n  // Product operations\n  getProducts(options?: { \n    limit?: number, \n    offset?: number, \n    categoryId?: number,\n    featured?: boolean,\n    search?: string,\n    minPrice?: number,\n    maxPrice?: number,\n    sort?: string \n  }): Promise<{ products: Product[], total: number }>;\n  getProduct(id: number): Promise<Product | undefined>;\n  getProductBySlug(slug: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: number, productData: Partial<InsertProduct>): Promise<Product | undefined>;\n  \n  // Cart operations\n  getCartItems(userId: number): Promise<CartItem[]>;\n  getCartItem(id: number): Promise<CartItem | undefined>;\n  getCartItemByUserAndProduct(userId: number, productId: number): Promise<CartItem | undefined>;\n  createCartItem(cartItem: InsertCartItem): Promise<CartItem>;\n  updateCartItem(id: number, cartItemData: Partial<InsertCartItem>): Promise<CartItem | undefined>;\n  deleteCartItem(id: number): Promise<boolean>;\n  clearCart(userId: number): Promise<boolean>;\n  \n  // Order operations\n  getOrders(userId: number): Promise<Order[]>;\n  getOrder(id: number): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: number, orderData: Partial<InsertOrder>): Promise<Order | undefined>;\n  \n  // Order item operations\n  getOrderItems(orderId: number): Promise<OrderItem[]>;\n  createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;\n  \n  // Review operations\n  getReviews(productId: number): Promise<Review[]>;\n  createReview(review: InsertReview): Promise<Review>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private categories: Map<number, Category>;\n  private products: Map<number, Product>;\n  private cartItems: Map<number, CartItem>;\n  private orders: Map<number, Order>;\n  private orderItems: Map<number, OrderItem>;\n  private reviews: Map<number, Review>;\n  \n  private currentUserIds: number;\n  private currentCategoryIds: number;\n  private currentProductIds: number;\n  private currentCartItemIds: number;\n  private currentOrderIds: number;\n  private currentOrderItemIds: number;\n  private currentReviewIds: number;\n\n  constructor() {\n    this.users = new Map();\n    this.categories = new Map();\n    this.products = new Map();\n    this.cartItems = new Map();\n    this.orders = new Map();\n    this.orderItems = new Map();\n    this.reviews = new Map();\n    \n    this.currentUserIds = 1;\n    this.currentCategoryIds = 1;\n    this.currentProductIds = 1;\n    this.currentCartItemIds = 1;\n    this.currentOrderIds = 1;\n    this.currentOrderItemIds = 1;\n    this.currentReviewIds = 1;\n    \n    // Seed initial data\n    this.seedData();\n  }\n\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username.toLowerCase() === username.toLowerCase()\n    );\n  }\n  \n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email.toLowerCase() === email.toLowerCase()\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentUserIds++;\n    const user: User = { ...insertUser, id, wishlistIds: [], createdAt: new Date() };\n    this.users.set(id, user);\n    return user;\n  }\n  \n  async updateUser(id: number, userData: Partial<InsertUser>): Promise<User | undefined> {\n    const existingUser = await this.getUser(id);\n    if (!existingUser) return undefined;\n    \n    const updatedUser = { ...existingUser, ...userData };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n  \n  async getCategory(id: number): Promise<Category | undefined> {\n    return this.categories.get(id);\n  }\n  \n  async getCategoryBySlug(slug: string): Promise<Category | undefined> {\n    return Array.from(this.categories.values()).find(\n      (category) => category.slug === slug\n    );\n  }\n  \n  async createCategory(insertCategory: InsertCategory): Promise<Category> {\n    const id = this.currentCategoryIds++;\n    const category: Category = { ...insertCategory, id };\n    this.categories.set(id, category);\n    return category;\n  }\n\n  // Product operations\n  async getProducts(options: { \n    limit?: number, \n    offset?: number, \n    categoryId?: number,\n    featured?: boolean,\n    search?: string,\n    minPrice?: number,\n    maxPrice?: number,\n    sort?: string \n  } = {}): Promise<{ products: Product[], total: number }> {\n    let filteredProducts = Array.from(this.products.values());\n    \n    // Apply filters\n    if (options.categoryId !== undefined) {\n      filteredProducts = filteredProducts.filter(p => p.categoryId === options.categoryId);\n    }\n    \n    if (options.featured !== undefined) {\n      filteredProducts = filteredProducts.filter(p => p.featured === options.featured);\n    }\n    \n    if (options.search !== undefined) {\n      const searchTerm = options.search.toLowerCase();\n      filteredProducts = filteredProducts.filter(p => \n        p.name.toLowerCase().includes(searchTerm) || \n        (p.description && p.description.toLowerCase().includes(searchTerm))\n      );\n    }\n    \n    if (options.minPrice !== undefined) {\n      filteredProducts = filteredProducts.filter(p => p.price >= options.minPrice!);\n    }\n    \n    if (options.maxPrice !== undefined) {\n      filteredProducts = filteredProducts.filter(p => p.price <= options.maxPrice!);\n    }\n    \n    // Apply sorting\n    if (options.sort) {\n      switch (options.sort) {\n        case 'price_asc':\n          filteredProducts.sort((a, b) => a.price - b.price);\n          break;\n        case 'price_desc':\n          filteredProducts.sort((a, b) => b.price - a.price);\n          break;\n        case 'name_asc':\n          filteredProducts.sort((a, b) => a.name.localeCompare(b.name));\n          break;\n        case 'name_desc':\n          filteredProducts.sort((a, b) => b.name.localeCompare(a.name));\n          break;\n        case 'newest':\n          filteredProducts.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n          break;\n        case 'rating':\n          filteredProducts.sort((a, b) => b.rating - a.rating);\n          break;\n      }\n    }\n    \n    const total = filteredProducts.length;\n    \n    // Apply pagination\n    if (options.offset !== undefined && options.limit !== undefined) {\n      filteredProducts = filteredProducts.slice(options.offset, options.offset + options.limit);\n    } else if (options.limit !== undefined) {\n      filteredProducts = filteredProducts.slice(0, options.limit);\n    }\n    \n    return { products: filteredProducts, total };\n  }\n  \n  async getProduct(id: number): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n  \n  async getProductBySlug(slug: string): Promise<Product | undefined> {\n    return Array.from(this.products.values()).find(\n      (product) => product.slug === slug\n    );\n  }\n  \n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = this.currentProductIds++;\n    const product: Product = { \n      ...insertProduct, \n      id, \n      rating: 0,\n      reviewCount: 0,\n      createdAt: new Date()\n    };\n    this.products.set(id, product);\n    return product;\n  }\n  \n  async updateProduct(id: number, productData: Partial<InsertProduct>): Promise<Product | undefined> {\n    const existingProduct = await this.getProduct(id);\n    if (!existingProduct) return undefined;\n    \n    const updatedProduct = { ...existingProduct, ...productData };\n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  // Cart operations\n  async getCartItems(userId: number): Promise<CartItem[]> {\n    return Array.from(this.cartItems.values()).filter(\n      (item) => item.userId === userId\n    );\n  }\n  \n  async getCartItem(id: number): Promise<CartItem | undefined> {\n    return this.cartItems.get(id);\n  }\n  \n  async getCartItemByUserAndProduct(userId: number, productId: number): Promise<CartItem | undefined> {\n    return Array.from(this.cartItems.values()).find(\n      (item) => item.userId === userId && item.productId === productId\n    );\n  }\n  \n  async createCartItem(insertCartItem: InsertCartItem): Promise<CartItem> {\n    const id = this.currentCartItemIds++;\n    const cartItem: CartItem = { ...insertCartItem, id, createdAt: new Date() };\n    this.cartItems.set(id, cartItem);\n    return cartItem;\n  }\n  \n  async updateCartItem(id: number, cartItemData: Partial<InsertCartItem>): Promise<CartItem | undefined> {\n    const existingCartItem = await this.getCartItem(id);\n    if (!existingCartItem) return undefined;\n    \n    const updatedCartItem = { ...existingCartItem, ...cartItemData };\n    this.cartItems.set(id, updatedCartItem);\n    return updatedCartItem;\n  }\n  \n  async deleteCartItem(id: number): Promise<boolean> {\n    return this.cartItems.delete(id);\n  }\n  \n  async clearCart(userId: number): Promise<boolean> {\n    const userCartItems = await this.getCartItems(userId);\n    userCartItems.forEach(item => {\n      this.cartItems.delete(item.id);\n    });\n    return true;\n  }\n\n  // Order operations\n  async getOrders(userId: number): Promise<Order[]> {\n    return Array.from(this.orders.values()).filter(\n      (order) => order.userId === userId\n    );\n  }\n  \n  async getOrder(id: number): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n  \n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const id = this.currentOrderIds++;\n    const order: Order = { ...insertOrder, id, createdAt: new Date() };\n    this.orders.set(id, order);\n    return order;\n  }\n  \n  async updateOrder(id: number, orderData: Partial<InsertOrder>): Promise<Order | undefined> {\n    const existingOrder = await this.getOrder(id);\n    if (!existingOrder) return undefined;\n    \n    const updatedOrder = { ...existingOrder, ...orderData };\n    this.orders.set(id, updatedOrder);\n    return updatedOrder;\n  }\n\n  // Order item operations\n  async getOrderItems(orderId: number): Promise<OrderItem[]> {\n    return Array.from(this.orderItems.values()).filter(\n      (item) => item.orderId === orderId\n    );\n  }\n  \n  async createOrderItem(insertOrderItem: InsertOrderItem): Promise<OrderItem> {\n    const id = this.currentOrderItemIds++;\n    const orderItem: OrderItem = { ...insertOrderItem, id };\n    this.orderItems.set(id, orderItem);\n    return orderItem;\n  }\n\n  // Review operations\n  async getReviews(productId: number): Promise<Review[]> {\n    return Array.from(this.reviews.values()).filter(\n      (review) => review.productId === productId\n    );\n  }\n  \n  async createReview(insertReview: InsertReview): Promise<Review> {\n    const id = this.currentReviewIds++;\n    const review: Review = { ...insertReview, id, createdAt: new Date() };\n    this.reviews.set(id, review);\n    \n    // Update product rating\n    const product = await this.getProduct(review.productId);\n    if (product) {\n      const productReviews = await this.getReviews(product.id);\n      const totalRating = productReviews.reduce((sum, r) => sum + r.rating, 0);\n      const newRating = totalRating / productReviews.length;\n      \n      await this.updateProduct(product.id, {\n        rating: parseFloat(newRating.toFixed(1)),\n        reviewCount: productReviews.length\n      });\n    }\n    \n    return review;\n  }\n\n  // Seed initial data\n  private seedData() {\n    // Seed Categories\n    const categories: InsertCategory[] = [\n      {\n        name: \"Tech Accessories\",\n        slug: \"tech-accessories\",\n        description: \"Innovative 3D-printed accessories for your devices\",\n        imageUrl: \"https://pixabay.com/get/gcc0a0a4b37a6bb42ea99035f894563628621c457eb9f835241fc178574fd789477fc5ee4906f4aecc16d88203ac43654a1fbd4333b5f9b99f989869e9d920a06_1280.jpg\",\n      },\n      {\n        name: \"Home Decor\",\n        slug: \"home-decor\",\n        description: \"Modern 3D-printed decorations for your home\",\n        imageUrl: \"https://images.unsplash.com/photo-1538688423619-a81d3f23454b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&h=400&q=80\",\n      },\n      {\n        name: \"Collectibles\",\n        slug: \"collectibles\",\n        description: \"Unique 3D-printed collectibles and figurines\",\n        imageUrl: \"https://images.unsplash.com/photo-1566577739112-5180d4bf9390?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&h=400&q=80\",\n      },\n      {\n        name: \"Gaming\",\n        slug: \"gaming\",\n        description: \"3D-printed gaming accessories and add-ons\",\n        imageUrl: \"https://pixabay.com/get/g7718fd7526b3cf3e52816951a64ce59adf0bf03e283f1525c3e96c49f72a3056b437df99bede5e78681761f1865dda8b334c1d3dfa0aa0def30bbabcd9106795_1280.jpg\",\n      }\n    ];\n    \n    categories.forEach(category => {\n      this.createCategory(category);\n    });\n    \n    // Seed Products\n    const products: InsertProduct[] = [\n      {\n        name: \"ModularStand Pro\",\n        slug: \"modularstand-pro\",\n        description: \"Adjustable phone & tablet stand with multiple viewing angles and cable management\",\n        price: 29.99,\n        salePrice: 24.99,\n        categoryId: 1, // Tech Accessories\n        stock: 50,\n        modelUrl: \"/models/phone-stand.gltf\",\n        imageUrls: [\n          \"https://images.unsplash.com/photo-1586953208448-b95a79798f07?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&h=600\"\n        ],\n        tags: [\"phone\", \"tablet\", \"stand\", \"desk\"],\n        attributes: {\n          colors: [\"black\", \"white\", \"blue\"],\n          materials: [\"PLA\", \"ABS\", \"PETG\"]\n        },\n        featured: true,\n      },\n      {\n        name: \"Hexa Organizer\",\n        slug: \"hexa-organizer\",\n        description: \"Geometric desk organizer with compartments for pens, cards, and small accessories\",\n        price: 24.99,\n        categoryId: 2, // Home Decor\n        stock: 35,\n        modelUrl: \"/models/organizer.gltf\",\n        imageUrls: [\n          \"https://images.unsplash.com/photo-1610016302534-6f67f1c968d8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&h=600\"\n        ],\n        tags: [\"desk\", \"organizer\", \"office\"],\n        attributes: {\n          colors: [\"teal\", \"purple\", \"gray\"],\n          materials: [\"PLA\", \"PETG\"]\n        },\n        featured: true,\n      },\n      {\n        name: \"DroneX Frame\",\n        slug: \"dronex-frame\",\n        description: \"Lightweight, durable drone body frame kit for DIY drone builders and hobbyists\",\n        price: 49.99,\n        categoryId: 1, // Tech Accessories\n        stock: 20,\n        modelUrl: \"/models/drone-frame.gltf\",\n        imageUrls: [\n          \"https://pixabay.com/get/gdc2e7745e3035dce1e02b7403dd1de7333d7331d4459d46cd76d423db1fd650282cd560f3f34b0c9d71341df27c70217a3d982a67ab106673833886b09424a90_1280.jpg\"\n        ],\n        tags: [\"drone\", \"DIY\", \"frame\", \"hobby\"],\n        attributes: {\n          sizes: [\"small\", \"medium\", \"large\"],\n          materials: [\"PLA\", \"ABS\", \"Carbon Fiber\"]\n        },\n        featured: true,\n      },\n      {\n        name: \"NeoGarden Smart Planter\",\n        slug: \"neogarden-smart-planter\",\n        description: \"Self-watering planter with integrated LED grow lights and modular design\",\n        price: 59.99,\n        salePrice: 49.99,\n        categoryId: 2, // Home Decor\n        stock: 15,\n        modelUrl: \"/models/planter.gltf\",\n        imageUrls: [\n          \"https://images.unsplash.com/photo-1523275335684-37898b6baf30?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&h=600\"\n        ],\n        tags: [\"planter\", \"garden\", \"LED\", \"home\"],\n        attributes: {\n          colors: [\"green\", \"blue\", \"pink\"],\n          sizes: [\"small\", \"medium\", \"large\"]\n        },\n        featured: true,\n      },\n      {\n        name: \"Geometric Wall Art\",\n        slug: \"geometric-wall-art\",\n        description: \"Modern 3D-printed geometric wall art that adds dimension to any space\",\n        price: 39.99,\n        categoryId: 2, // Home Decor\n        stock: 25,\n        modelUrl: \"/models/wall-art.gltf\",\n        imageUrls: [\n          \"https://images.unsplash.com/photo-1581092335397-9583eb92d232?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&h=600\"\n        ],\n        tags: [\"art\", \"wall\", \"decoration\", \"geometric\"],\n        attributes: {\n          colors: [\"white\", \"black\", \"gold\"],\n          sizes: [\"small\", \"medium\", \"large\"]\n        },\n        featured: false,\n      },\n      {\n        name: \"MechFigure X-1\",\n        slug: \"mechfigure-x1\",\n        description: \"Highly detailed 3D-printed mecha collectible figure with posable joints\",\n        price: 79.99,\n        categoryId: 3, // Collectibles\n        stock: 10,\n        modelUrl: \"/models/mech-figure.gltf\",\n        imageUrls: [\n          \"https://pixabay.com/get/g1282f547137cbc9950a7f06e15d035ebd76bd794f10332ea913d168e93154b414d796502251b3913da8670baffa5c8b17debfb46ccfbc78feac26b526014ce34_1280.jpg\"\n        ],\n        tags: [\"figure\", \"collectible\", \"sci-fi\", \"mecha\"],\n        attributes: {\n          colors: [\"gray\", \"red\", \"blue\"],\n          materials: [\"PLA\", \"Resin\"]\n        },\n        featured: false,\n      },\n      {\n        name: \"Cable Management System\",\n        slug: \"cable-management-system\",\n        description: \"Modular 3D-printed cable management system for a clean desk setup\",\n        price: 19.99,\n        categoryId: 1, // Tech Accessories\n        stock: 40,\n        modelUrl: \"/models/cable-management.gltf\",\n        imageUrls: [\n          \"https://pixabay.com/get/gd58c56fb67b9db7c4a9a09661f1502d061850e3a0b8a993d86865179f17dd74db791d75be6a968ad97a1a2538aeef9d489d42edcbc8b0bcc2e113b8fab4a0316_1280.jpg\"\n        ],\n        tags: [\"cable\", \"management\", \"desk\", \"office\"],\n        attributes: {\n          colors: [\"black\", \"white\", \"transparent\"],\n          materials: [\"PLA\", \"PETG\"]\n        },\n        featured: false,\n      },\n      {\n        name: \"Gaming Controller Mount\",\n        slug: \"gaming-controller-mount\",\n        description: \"Wall mount for gaming controllers with integrated LED lighting\",\n        price: 34.99,\n        categoryId: 4, // Gaming\n        stock: 30,\n        modelUrl: \"/models/controller-mount.gltf\",\n        imageUrls: [\n          \"https://pixabay.com/get/g7718fd7526b3cf3e52816951a64ce59adf0bf03e283f1525c3e96c49f72a3056b437df99bede5e78681761f1865dda8b334c1d3dfa0aa0def30bbabcd9106795_1280.jpg\"\n        ],\n        tags: [\"gaming\", \"controller\", \"mount\", \"LED\"],\n        attributes: {\n          colors: [\"black\", \"blue\", \"red\"],\n          materials: [\"PLA\", \"ABS\"]\n        },\n        featured: false,\n      }\n    ];\n    \n    products.forEach(product => {\n      this.createProduct(product);\n    });\n    \n    // Seed User\n    this.createUser({\n      username: \"demo\",\n      password: \"password\",\n      email: \"demo@example.com\",\n      firstName: \"Demo\",\n      lastName: \"User\",\n      address: \"123 Main St\",\n      city: \"Anytown\",\n      state: \"CA\",\n      zipCode: \"12345\",\n      country: \"USA\",\n      phone: \"555-123-4567\"\n    });\n    \n    // Seed Reviews\n    const reviews = [\n      {\n        userId: 1,\n        productId: 1,\n        rating: 5,\n        comment: \"The ModularStand Pro is incredibly versatile! I use it for both my phone and tablet, and it holds them securely at perfect viewing angles.\"\n      },\n      {\n        userId: 1,\n        productId: 2,\n        rating: 4,\n        comment: \"Great desk organizer! The hexagonal design is attractive and it has just the right number of compartments.\"\n      },\n      {\n        userId: 1,\n        productId: 3,\n        rating: 5,\n        comment: \"The DroneX Frame is amazingly lightweight yet durable. I've crashed my drone multiple times and the frame is still intact!\"\n      },\n      {\n        userId: 1,\n        productId: 4,\n        rating: 4,\n        comment: \"Love my NeoGarden planter! The integrated LED lights work great for growing herbs indoors.\"\n      }\n    ];\n    \n    reviews.forEach(review => {\n      this.createReview(review);\n    });\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":21236},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, jsonb, timestamp, real, primaryKey } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users Table\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  address: text(\"address\"),\n  city: text(\"city\"),\n  state: text(\"state\"),\n  zipCode: text(\"zip_code\"),\n  country: text(\"country\"),\n  phone: text(\"phone\"),\n  wishlistIds: text(\"wishlist_ids\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  wishlistIds: true\n});\n\n// Categories Table\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  imageUrl: text(\"image_url\"),\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true\n});\n\n// Products Table\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  price: real(\"price\").notNull(),\n  salePrice: real(\"sale_price\"),\n  categoryId: integer(\"category_id\").references(() => categories.id),\n  stock: integer(\"stock\").notNull().default(0),\n  modelUrl: text(\"model_url\"), // URL for 3D model\n  imageUrls: text(\"image_urls\").array(),\n  tags: text(\"tags\").array(),\n  attributes: jsonb(\"attributes\"), // Storage for color, size, material options\n  featured: boolean(\"featured\").default(false),\n  rating: real(\"rating\").default(0),\n  reviewCount: integer(\"review_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true\n});\n\n// Orders Table\nexport const orders = pgTable(\"orders\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  status: text(\"status\").notNull().default(\"pending\"),\n  total: real(\"total\").notNull(),\n  shippingAddress: jsonb(\"shipping_address\"),\n  paymentMethod: text(\"payment_method\"),\n  paymentStatus: text(\"payment_status\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true\n});\n\n// Order Items Table\nexport const orderItems = pgTable(\"order_items\", {\n  id: serial(\"id\").primaryKey(),\n  orderId: integer(\"order_id\").references(() => orders.id),\n  productId: integer(\"product_id\").references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  price: real(\"price\").notNull(),\n  customizations: jsonb(\"customizations\"),\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true\n});\n\n// Reviews Table\nexport const reviews = pgTable(\"reviews\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  productId: integer(\"product_id\").references(() => products.id),\n  rating: integer(\"rating\").notNull(),\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true\n});\n\n// Cart Items Table\nexport const cartItems = pgTable(\"cart_items\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  productId: integer(\"product_id\").references(() => products.id),\n  quantity: integer(\"quantity\").notNull().default(1),\n  customizations: jsonb(\"customizations\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true\n});\n\n// Type Definitions\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\n\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\n\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\n","size_bytes":4819},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/layout/ThemeProvider\";\nimport { AuthProvider } from \"@/context/AuthContext\";\nimport { CartProvider } from \"@/context/CartContext\";\nimport { CurrencyProvider } from \"@/context/CurrencyContext\";\nimport Navbar from \"@/components/layout/Navbar\";\nimport Footer from \"@/components/layout/Footer\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/Home\";\nimport Products from \"@/pages/Products\";\nimport ProductDetails from \"@/pages/ProductDetails\";\nimport Cart from \"@/pages/Cart\";\nimport Checkout from \"@/pages/Checkout\";\nimport Profile from \"@/pages/Profile\";\nimport Customize from \"@/pages/Customize\";\nimport Login from \"@/pages/Login\";\nimport Register from \"@/pages/Register\";\n\nfunction Router() {\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <Navbar />\n      <main className=\"flex-grow\">\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/products\" component={Products} />\n          <Route path=\"/products/:slug\" component={ProductDetails} />\n          <Route path=\"/cart\" component={Cart} />\n          <Route path=\"/checkout\" component={Checkout} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/customize\" component={Customize} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/register\" component={Register} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AuthProvider>\n          <CartProvider>\n            <CurrencyProvider>\n              <TooltipProvider>\n                <Toaster />\n                <Router />\n              </TooltipProvider>\n            </CurrencyProvider>\n          </CartProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2219},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n      --background: 0 0% 100%;\n--foreground: 20 14.3% 4.1%;\n--muted: 60 4.8% 95.9%;\n--muted-foreground: 25 5.3% 44.7%;\n--popover: 0 0% 100%;\n--popover-foreground: 20 14.3% 4.1%;\n--card: 0 0% 100%;\n--card-foreground: 20 14.3% 4.1%;\n--border: 20 5.9% 90%;\n--input: 20 5.9% 90%;\n--primary: 207 90% 54%;\n--primary-foreground: 211 100% 99%;\n--secondary: 60 4.8% 95.9%;\n--secondary-foreground: 24 9.8% 10%;\n--accent: 60 4.8% 95.9%;\n--accent-foreground: 24 9.8% 10%;\n--destructive: 0 84.2% 60.2%;\n--destructive-foreground: 60 9.1% 97.8%;\n--ring: 20 14.3% 4.1%;\n--radius: 0.5rem;\n  }\n  .dark {\n      --background: 240 10% 3.9%;\n--foreground: 0 0% 98%;\n--muted: 240 3.7% 15.9%;\n--muted-foreground: 240 5% 64.9%;\n--popover: 240 10% 3.9%;\n--popover-foreground: 0 0% 98%;\n--card: 240 10% 3.9%;\n--card-foreground: 0 0% 98%;\n--border: 240 3.7% 15.9%;\n--input: 240 3.7% 15.9%;\n--primary: 207 90% 54%;\n--primary-foreground: 211 100% 99%;\n--secondary: 240 3.7% 15.9%;\n--secondary-foreground: 0 0% 98%;\n--accent: 240 3.7% 15.9%;\n--accent-foreground: 0 0% 98%;\n--destructive: 0 62.8% 30.6%;\n--destructive-foreground: 0 0% 98%;\n--ring: 240 4.9% 83.9%;\n--radius: 0.5rem;\n  }\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":1352},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/context/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  zipCode?: string;\n  country?: string;\n  phone?: string;\n  wishlistIds?: string[];\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<boolean>;\n  register: (userData: RegisterData) => Promise<boolean>;\n  logout: () => void;\n  isAuthenticated: boolean;\n}\n\ninterface RegisterData {\n  username: string;\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Check for saved user in localStorage\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      try {\n        setUser(JSON.parse(savedUser));\n      } catch (error) {\n        console.error('Failed to parse saved user:', error);\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    try {\n      setLoading(true);\n      const response = await apiRequest('POST', '/api/auth/login', { email, password });\n      const userData = await response.json();\n      \n      setUser(userData);\n      localStorage.setItem('user', JSON.stringify(userData));\n      \n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${userData.username}!`,\n      });\n      \n      return true;\n    } catch (error) {\n      console.error('Login failed:', error);\n      toast({\n        title: \"Login failed\",\n        description: \"Invalid credentials. Please try again.\",\n        variant: \"destructive\",\n      });\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (userData: RegisterData): Promise<boolean> => {\n    try {\n      setLoading(true);\n      const response = await apiRequest('POST', '/api/auth/register', userData);\n      const newUser = await response.json();\n      \n      setUser(newUser);\n      localStorage.setItem('user', JSON.stringify(newUser));\n      \n      toast({\n        title: \"Registration successful\",\n        description: `Welcome, ${newUser.username}!`,\n      });\n      \n      return true;\n    } catch (error) {\n      console.error('Registration failed:', error);\n      toast({\n        title: \"Registration failed\",\n        description: \"Please check your information and try again.\",\n        variant: \"destructive\",\n      });\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n    toast({\n      title: \"Logged out\",\n      description: \"You have been successfully logged out.\",\n    });\n  };\n\n  return (\n    <AuthContext.Provider value={{ \n      user, \n      loading, \n      login, \n      register, \n      logout, \n      isAuthenticated: !!user\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":3622},"client/src/context/CartContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useAuth } from './AuthContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { Product } from '@shared/schema';\n\nexport interface CartItem {\n  id: number;\n  userId: number;\n  productId: number;\n  quantity: number;\n  product?: Product;\n  customizations?: any;\n}\n\ninterface CartContextType {\n  items: CartItem[];\n  loading: boolean;\n  error: string | null;\n  addItem: (productId: number, quantity: number, customizations?: any) => Promise<void>;\n  updateItem: (id: number, quantity: number) => Promise<void>;\n  removeItem: (id: number) => Promise<void>;\n  clearCart: () => Promise<void>;\n  itemCount: number;\n  subtotal: number;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport function CartProvider({ children }: { children: ReactNode }) {\n  const [items, setItems] = useState<CartItem[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  // Calculate derived values\n  const itemCount = items.reduce((sum, item) => sum + item.quantity, 0);\n  const subtotal = items.reduce((sum, item) => {\n    if (item.product) {\n      const price = item.product.salePrice || item.product.price;\n      return sum + (price * item.quantity);\n    }\n    return sum;\n  }, 0);\n\n  // Fetch cart whenever user changes\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      fetchCart();\n    } else {\n      setItems([]);\n    }\n  }, [isAuthenticated, user]);\n\n  const fetchCart = async () => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await apiRequest('GET', `/api/cart/${user.id}`);\n      const cartItems = await response.json();\n      \n      setItems(cartItems);\n    } catch (error) {\n      console.error('Failed to fetch cart:', error);\n      setError('Failed to load your cart. Please try again.');\n      \n      toast({\n        title: 'Cart Error',\n        description: 'Failed to load your cart items.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addItem = async (productId: number, quantity: number, customizations?: any) => {\n    if (!user) {\n      toast({\n        title: 'Authentication Required',\n        description: 'Please log in to add items to your cart.',\n        variant: 'destructive',\n      });\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const payload = {\n        userId: user.id,\n        productId,\n        quantity,\n        customizations\n      };\n      \n      const response = await apiRequest('POST', '/api/cart', payload);\n      const updatedItem = await response.json();\n      \n      // Update local cart state\n      fetchCart();\n      \n      toast({\n        title: 'Item Added',\n        description: 'Product has been added to your cart.',\n      });\n    } catch (error) {\n      console.error('Failed to add item to cart:', error);\n      setError('Failed to add item to cart. Please try again.');\n      \n      toast({\n        title: 'Cart Error',\n        description: 'Failed to add item to your cart.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateItem = async (id: number, quantity: number) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      await apiRequest('PUT', `/api/cart/${id}`, { quantity });\n      \n      // Update local cart state\n      fetchCart();\n      \n      toast({\n        title: 'Cart Updated',\n        description: 'Your cart has been updated.',\n      });\n    } catch (error) {\n      console.error('Failed to update cart item:', error);\n      setError('Failed to update cart. Please try again.');\n      \n      toast({\n        title: 'Cart Error',\n        description: 'Failed to update your cart.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const removeItem = async (id: number) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      await apiRequest('DELETE', `/api/cart/${id}`);\n      \n      // Update local cart state\n      fetchCart();\n      \n      toast({\n        title: 'Item Removed',\n        description: 'Item has been removed from your cart.',\n      });\n    } catch (error) {\n      console.error('Failed to remove cart item:', error);\n      setError('Failed to remove item from cart. Please try again.');\n      \n      toast({\n        title: 'Cart Error',\n        description: 'Failed to remove item from your cart.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const clearCart = async () => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      await apiRequest('DELETE', `/api/cart/user/${user.id}`);\n      \n      // Update local cart state\n      setItems([]);\n      \n      toast({\n        title: 'Cart Cleared',\n        description: 'Your cart has been cleared.',\n      });\n    } catch (error) {\n      console.error('Failed to clear cart:', error);\n      setError('Failed to clear cart. Please try again.');\n      \n      toast({\n        title: 'Cart Error',\n        description: 'Failed to clear your cart.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <CartContext.Provider value={{\n      items,\n      loading,\n      error,\n      addItem,\n      updateItem,\n      removeItem,\n      clearCart,\n      itemCount,\n      subtotal\n    }}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n","size_bytes":5950},"client/src/context/CurrencyContext.tsx":{"content":"import { createContext, useState, useContext, useCallback, ReactNode, useEffect } from 'react';\n\ntype Currency = 'USD' | 'INR' | 'EUR' | 'GBP' | 'JPY' | 'AUD' | 'CAD';\n\ninterface CurrencyContextType {\n  currency: Currency;\n  setCurrency: (currency: Currency) => void;\n  formatPrice: (price: number) => string;\n  convertPrice: (price: number) => number;\n  exchangeRate: number;\n  currencySymbol: string;\n  availableCurrencies: Array<{code: Currency, symbol: string, name: string}>;\n}\n\nconst currencySymbols: Record<Currency, string> = {\n  USD: '$',\n  INR: '₹',\n  EUR: '€',\n  GBP: '£',\n  JPY: '¥',\n  AUD: 'A$',\n  CAD: 'C$'\n};\n\nconst currencyNames: Record<Currency, string> = {\n  USD: 'US Dollar',\n  INR: 'Indian Rupee',\n  EUR: 'Euro',\n  GBP: 'British Pound',\n  JPY: 'Japanese Yen',\n  AUD: 'Australian Dollar',\n  CAD: 'Canadian Dollar'\n};\n\nconst exchangeRates: Record<Currency, number> = {\n  USD: 1.0,\n  INR: 83.36, // 1 USD = 83.36 INR\n  EUR: 0.93,  // 1 USD = 0.93 EUR\n  GBP: 0.80,  // 1 USD = 0.80 GBP\n  JPY: 154.41, // 1 USD = 154.41 JPY\n  AUD: 1.52, // 1 USD = 1.52 AUD\n  CAD: 1.37  // 1 USD = 1.37 CAD\n};\n\nconst CurrencyContext = createContext<CurrencyContextType | undefined>(undefined);\n\nexport function CurrencyProvider({ children }: { children: ReactNode }) {\n  // Default to INR as preferred currency\n  const [currency, setCurrency] = useState<Currency>('INR');\n  \n  // Set default currency from localStorage on initial load\n  useEffect(() => {\n    const savedCurrency = localStorage.getItem('preferredCurrency');\n    if (savedCurrency && Object.keys(currencySymbols).includes(savedCurrency)) {\n      setCurrency(savedCurrency as Currency);\n    }\n  }, []);\n  \n  // Save currency preference to localStorage when changed\n  useEffect(() => {\n    localStorage.setItem('preferredCurrency', currency);\n  }, [currency]);\n  \n  const exchangeRate = exchangeRates[currency];\n  const currencySymbol = currencySymbols[currency];\n  \n  // Convert price from USD to selected currency\n  const convertPrice = useCallback((price: number): number => {\n    return price * exchangeRate;\n  }, [exchangeRate]);\n  \n  // Format price according to currency conventions\n  const formatPrice = useCallback((price: number) => {\n    const convertedPrice = price * exchangeRate;\n    \n    // Japanese Yen doesn't use decimal places\n    if (currency === 'JPY') {\n      return `${currencySymbol}${Math.round(convertedPrice).toLocaleString()}`;\n    }\n    \n    // Indian format uses different thousands separators\n    if (currency === 'INR') {\n      // Convert to Indian numbering system (lakhs, crores)\n      const formatter = new Intl.NumberFormat('en-IN', {\n        style: 'currency',\n        currency: 'INR',\n        maximumFractionDigits: 2\n      });\n      return formatter.format(convertedPrice);\n    }\n    \n    // Default formatting for other currencies\n    return `${currencySymbol}${convertedPrice.toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}`;\n  }, [currency, exchangeRate, currencySymbol]);\n  \n  // Create array of available currencies for dropdown\n  const availableCurrencies = Object.keys(currencySymbols).map((code) => ({\n    code: code as Currency,\n    symbol: currencySymbols[code as Currency],\n    name: currencyNames[code as Currency]\n  }));\n  \n  const value = {\n    currency,\n    setCurrency,\n    formatPrice,\n    convertPrice,\n    exchangeRate,\n    currencySymbol,\n    availableCurrencies\n  };\n  \n  return (\n    <CurrencyContext.Provider value={value}>\n      {children}\n    </CurrencyContext.Provider>\n  );\n}\n\nexport function useCurrency() {\n  const context = useContext(CurrencyContext);\n  if (context === undefined) {\n    throw new Error('useCurrency must be used within a CurrencyProvider');\n  }\n  return context;\n}","size_bytes":3720},"client/src/context/ThemeContext.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ntype Theme = 'dark' | 'light';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return (savedTheme as Theme) || 'dark';\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    \n    // Remove the previous theme\n    root.classList.remove('light', 'dark');\n    \n    // Add the current theme\n    root.classList.add(theme);\n    \n    // Save to localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === 'dark' ? 'light' : 'dark');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1259},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useContext } from 'react';\nimport { AuthContext } from '@/context/AuthContext';\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  \n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n};\n","size_bytes":294},"client/src/hooks/useCart.ts":{"content":"import { useContext } from 'react';\nimport { CartContext } from '@/context/CartContext';\n\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  \n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  \n  return context;\n};\n","size_bytes":293},"client/src/hooks/useCategories.ts":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Category } from '@shared/schema';\n\nexport function useCategories() {\n  return useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n}\n\nexport function useCategory(slug: string | undefined) {\n  return useQuery<Category>({\n    queryKey: [`/api/categories/${slug}`],\n    enabled: !!slug,\n  });\n}\n","size_bytes":362},"client/src/hooks/useProducts.ts":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Product } from '@shared/schema';\n\ninterface ProductsResponse {\n  products: Product[];\n  pagination: {\n    total: number;\n    limit: number;\n    offset: number;\n  };\n}\n\ninterface ProductsOptions {\n  limit?: number;\n  offset?: number;\n  category?: string;\n  featured?: boolean;\n  search?: string;\n  minPrice?: number;\n  maxPrice?: number;\n  sort?: string;\n}\n\nexport function useProducts(options: ProductsOptions = {}) {\n  const queryParams = new URLSearchParams();\n  \n  if (options.limit !== undefined) {\n    queryParams.append('limit', options.limit.toString());\n  }\n  \n  if (options.offset !== undefined) {\n    queryParams.append('offset', options.offset.toString());\n  }\n  \n  if (options.category) {\n    queryParams.append('category', options.category);\n  }\n  \n  if (options.featured !== undefined) {\n    queryParams.append('featured', options.featured.toString());\n  }\n  \n  if (options.search) {\n    queryParams.append('search', options.search);\n  }\n  \n  if (options.minPrice !== undefined) {\n    queryParams.append('minPrice', options.minPrice.toString());\n  }\n  \n  if (options.maxPrice !== undefined) {\n    queryParams.append('maxPrice', options.maxPrice.toString());\n  }\n  \n  if (options.sort) {\n    queryParams.append('sort', options.sort);\n  }\n  \n  const queryString = queryParams.toString();\n  const endpoint = `/api/products${queryString ? `?${queryString}` : ''}`;\n\n  return useQuery<ProductsResponse>({\n    queryKey: [endpoint],\n  });\n}\n\nexport function useProduct(slug: string | undefined) {\n  return useQuery<Product>({\n    queryKey: [`/api/products/${slug}`],\n    enabled: !!slug,\n  });\n}\n\nexport function useFeaturedProducts() {\n  return useQuery<Product[]>({\n    queryKey: ['/api/products/featured'],\n  });\n}\n","size_bytes":1784},"client/src/hooks/useTheme.ts":{"content":"import { useContext } from 'react';\nimport { ThemeContext } from '@/context/ThemeContext';\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  \n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  \n  return context;\n};\n","size_bytes":299},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  // Use relative paths for API requests (works for both localhost and Replit)\n  const fullUrl = url.startsWith('http') \n    ? url\n    : url;\n    \n  const res = await fetch(fullUrl, {\n    method,\n    headers: {\n      ...data ? { \"Content-Type\": \"application/json\" } : {},\n      \"Accept\": \"application/json\",\n    },\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Use relative paths for API requests (works for both localhost and Replit)\n    const url = (queryKey[0] as string).startsWith('http') \n      ? (queryKey[0] as string)\n      : (queryKey[0] as string);\n      \n    const res = await fetch(url, {\n      credentials: \"include\",\n      headers: {\n        \"Accept\": \"application/json\"\n      }\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1838},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Cart.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Helmet } from 'react-helmet';\nimport { useCart } from '@/context/CartContext';\nimport { useAuth } from '@/context/AuthContext';\nimport CartItem from '@/components/cart/CartItem';\nimport CartSummary from '@/components/cart/CartSummary';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { ShoppingCart, AlertCircle, PackageX, ArrowRight } from 'lucide-react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\nexport default function Cart() {\n  const { items, loading, error, clearCart } = useCart();\n  const { isAuthenticated } = useAuth();\n  const [clearDialogOpen, setClearDialogOpen] = useState(false);\n\n  // Handle clear cart confirmation\n  const handleClearCart = () => {\n    clearCart();\n    setClearDialogOpen(false);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Your Cart | 3D Print Wonders</title>\n        <meta name=\"description\" content=\"Review and checkout your 3D-printed product selections.\" />\n      </Helmet>\n      \n      <div className=\"container mx-auto px-4 py-10\">\n        <h1 className=\"text-3xl font-bold mb-8 flex items-center\">\n          <ShoppingCart className=\"mr-3 h-8 w-8\" /> Your Cart\n        </h1>\n        \n        {loading ? (\n          <div className=\"flex justify-center items-center py-12\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n          </div>\n        ) : error ? (\n          <div className=\"rounded-lg bg-destructive/10 p-6 text-center my-8\">\n            <AlertCircle className=\"h-10 w-10 text-destructive mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">Error Loading Cart</h3>\n            <p className=\"text-muted-foreground mb-4\">{error}</p>\n            <Button variant=\"outline\" asChild>\n              <Link href=\"/products\">Continue Shopping</Link>\n            </Button>\n          </div>\n        ) : !isAuthenticated ? (\n          <div className=\"rounded-lg bg-muted p-8 text-center my-8 max-w-2xl mx-auto\">\n            <PackageX className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-xl font-medium mb-2\">Sign In to View Your Cart</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Please sign in to view your cart and continue shopping for 3D-printed products.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button asChild>\n                <Link href=\"/login\">Sign In</Link>\n              </Button>\n              <Button variant=\"outline\" asChild>\n                <Link href=\"/register\">Create Account</Link>\n              </Button>\n            </div>\n          </div>\n        ) : items.length === 0 ? (\n          <div className=\"rounded-lg bg-muted p-8 text-center my-8 max-w-2xl mx-auto\">\n            <PackageX className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-xl font-medium mb-2\">Your Cart is Empty</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Looks like you haven't added any 3D-printed products to your cart yet. \n              Start exploring our innovative designs or create your own custom piece!\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button asChild>\n                <Link href=\"/products\">Browse Products</Link>\n              </Button>\n              <Button variant=\"outline\" asChild>\n                <Link href=\"/customize\">Customize Your Design</Link>\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Cart Items */}\n            <div className=\"lg:col-span-2\">\n              <div className=\"bg-card rounded-lg border shadow-sm\">\n                <div className=\"p-6\">\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <h2 className=\"text-xl font-semibold\">\n                      Cart Items ({items.length})\n                    </h2>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => setClearDialogOpen(true)}\n                    >\n                      Clear Cart\n                    </Button>\n                  </div>\n                  \n                  <Separator className=\"mb-6\" />\n                  \n                  <div className=\"space-y-6\">\n                    {items.map((item) => (\n                      <CartItem key={item.id} item={item} />\n                    ))}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"mt-8\">\n                <Button className=\"w-full\" asChild>\n                  <Link href=\"/products\">\n                    Continue Shopping\n                  </Link>\n                </Button>\n              </div>\n            </div>\n            \n            {/* Cart Summary */}\n            <div className=\"lg:col-span-1\">\n              <CartSummary items={items} />\n              \n              <div className=\"mt-4\">\n                <Button className=\"w-full flex items-center justify-center gap-2\" size=\"lg\" asChild>\n                  <Link href=\"/checkout\">\n                    Proceed to Checkout\n                    <ArrowRight className=\"h-4 w-4 ml-1\" />\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Clear Cart Confirmation Dialog */}\n      <AlertDialog open={clearDialogOpen} onOpenChange={setClearDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Clear your cart?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will remove all items from your cart. This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={handleClearCart}\n              className=\"bg-destructive hover:bg-destructive/90\"\n            >\n              Clear Cart\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","size_bytes":6578},"client/src/pages/Checkout.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Helmet } from 'react-helmet';\nimport { useAuth } from '@/context/AuthContext';\nimport { useCart } from '@/context/CartContext';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Separator } from '@/components/ui/separator';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  CreditCard, \n  ShoppingBag, \n  Truck, \n  ChevronRight, \n  ShieldCheck,\n  ArrowLeft,\n  Check,\n  AlertCircle, \n  PackageX \n} from 'lucide-react';\nimport CartSummary from '@/components/cart/CartSummary';\n\nconst checkoutSchema = z.object({\n  // Shipping Information\n  firstName: z.string().min(2, \"First name is required\"),\n  lastName: z.string().min(2, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(10, \"Phone number is required\"),\n  address: z.string().min(5, \"Address is required\"),\n  city: z.string().min(2, \"City is required\"),\n  state: z.string().min(2, \"State is required\"),\n  zipCode: z.string().min(5, \"ZIP code is required\"),\n  country: z.string().min(2, \"Country is required\"),\n  \n  // Payment Information\n  paymentMethod: z.enum([\"creditCard\", \"paypal\"]),\n  savePaymentInfo: z.boolean().optional(),\n  \n  // Additional Information\n  notes: z.string().optional(),\n  createAccount: z.boolean().optional(),\n  agreeToTerms: z.boolean().refine(val => val === true, {\n    message: \"You must agree to the terms and conditions\"\n  }),\n});\n\ntype CheckoutFormValues = z.infer<typeof checkoutSchema>;\n\nexport default function Checkout() {\n  const [location, navigate] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const { items, subtotal, clearCart } = useCart();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  // Define shipping cost\n  const shippingCost = subtotal > 50 ? 0 : 5.99;\n  const tax = subtotal * 0.08; // 8% tax\n  const total = subtotal + shippingCost + tax;\n  \n  // Set default form values based on user data\n  const defaultValues: Partial<CheckoutFormValues> = {\n    firstName: user?.firstName || '',\n    lastName: user?.lastName || '',\n    email: user?.email || '',\n    phone: user?.phone || '',\n    address: user?.address || '',\n    city: user?.city || '',\n    state: user?.state || '',\n    zipCode: user?.zipCode || '',\n    country: user?.country || 'US',\n    paymentMethod: 'creditCard',\n    agreeToTerms: false,\n    savePaymentInfo: false,\n    createAccount: false,\n  };\n  \n  // Form definition\n  const form = useForm<CheckoutFormValues>({\n    resolver: zodResolver(checkoutSchema),\n    defaultValues,\n  });\n  \n  // Handle form submission\n  const onSubmit = async (data: CheckoutFormValues) => {\n    if (items.length === 0) {\n      toast({\n        title: \"Empty Cart\",\n        description: \"Your cart is empty. Add some products before checkout.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to complete your purchase.\",\n        variant: \"destructive\",\n      });\n      navigate(\"/login\");\n      return;\n    }\n    \n    try {\n      setIsSubmitting(true);\n      \n      // Prepare order data\n      const orderData = {\n        userId: user!.id,\n        total,\n        shippingAddress: {\n          firstName: data.firstName,\n          lastName: data.lastName,\n          address: data.address,\n          city: data.city,\n          state: data.state,\n          zipCode: data.zipCode,\n          country: data.country,\n          phone: data.phone,\n        },\n        paymentMethod: data.paymentMethod,\n        paymentStatus: \"pending\",\n      };\n      \n      // Submit order\n      const response = await apiRequest('POST', '/api/orders', orderData);\n      const order = await response.json();\n      \n      // Order success\n      toast({\n        title: \"Order Placed Successfully!\",\n        description: `Order #${order.id} has been placed. Thank you for your purchase!`,\n      });\n      \n      // Clear cart\n      clearCart();\n      \n      // Redirect to order confirmation page\n      navigate(`/profile/orders`);\n    } catch (error) {\n      console.error('Order failed:', error);\n      toast({\n        title: \"Order Failed\",\n        description: \"There was an error processing your order. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  // Guard for empty cart or unauthenticated users\n  if (items.length === 0) {\n    return (\n      <div className=\"container mx-auto px-4 py-10\">\n        <Helmet>\n          <title>Checkout | 3D Print Wonders</title>\n          <meta name=\"description\" content=\"Complete your purchase of 3D-printed products.\" />\n        </Helmet>\n        \n        <div className=\"rounded-lg bg-muted p-8 text-center my-8 max-w-2xl mx-auto\">\n          <PackageX className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n          <h3 className=\"text-xl font-medium mb-2\">Your Cart is Empty</h3>\n          <p className=\"text-muted-foreground mb-6\">\n            You can't proceed to checkout with an empty cart.\n            Add some products first!\n          </p>\n          <Button asChild>\n            <a href=\"/products\">Browse Products</a>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n  \n  if (!isAuthenticated) {\n    return (\n      <div className=\"container mx-auto px-4 py-10\">\n        <Helmet>\n          <title>Checkout | 3D Print Wonders</title>\n          <meta name=\"description\" content=\"Complete your purchase of 3D-printed products.\" />\n        </Helmet>\n        \n        <div className=\"rounded-lg bg-muted p-8 text-center my-8 max-w-2xl mx-auto\">\n          <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n          <h3 className=\"text-xl font-medium mb-2\">Sign In Required</h3>\n          <p className=\"text-muted-foreground mb-6\">\n            Please sign in to your account to complete checkout.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild>\n              <a href=\"/login\">Sign In</a>\n            </Button>\n            <Button variant=\"outline\" asChild>\n              <a href=\"/register\">Create Account</a>\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <>\n      <Helmet>\n        <title>Checkout | 3D Print Wonders</title>\n        <meta name=\"description\" content=\"Complete your purchase of 3D-printed products.\" />\n      </Helmet>\n      \n      <div className=\"container mx-auto px-4 py-10\">\n        {/* Checkout Header */}\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2 flex items-center\">\n              <ShoppingBag className=\"mr-3 h-7 w-7\" /> Checkout\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Complete your purchase of {items.length} {items.length === 1 ? 'item' : 'items'}\n            </p>\n          </div>\n          \n          <Button variant=\"ghost\" size=\"sm\" className=\"mt-4 md:mt-0\" asChild>\n            <a href=\"/cart\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Cart\n            </a>\n          </Button>\n        </div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Checkout Form */}\n          <div className=\"lg:col-span-2\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n                {/* Shipping Information */}\n                <div className=\"bg-card rounded-lg border p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <Truck className=\"h-5 w-5 text-primary mr-2\" />\n                    <h2 className=\"text-xl font-semibold\">Shipping Information</h2>\n                  </div>\n                  \n                  <Separator className=\"mb-6\" />\n                  \n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>First Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"John\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Last Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Doe\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"example@email.com\" type=\"email\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"phone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"(123) 456-7890\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"address\"\n                      render={({ field }) => (\n                        <FormItem className=\"sm:col-span-2\">\n                          <FormLabel>Address</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"123 Main St, Apt 4B\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"city\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>City</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"New York\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"state\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>State</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"NY\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"zipCode\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>ZIP Code</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"10001\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"country\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Country</FormLabel>\n                          <Select \n                            onValueChange={field.onChange} \n                            defaultValue={field.value}\n                          >\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select country\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"US\">United States</SelectItem>\n                              <SelectItem value=\"CA\">Canada</SelectItem>\n                              <SelectItem value=\"UK\">United Kingdom</SelectItem>\n                              <SelectItem value=\"AU\">Australia</SelectItem>\n                              <SelectItem value=\"DE\">Germany</SelectItem>\n                              <SelectItem value=\"FR\">France</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem className=\"mt-4\">\n                        <FormLabel>Order Notes (Optional)</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Special delivery instructions or notes about your order\" \n                            className=\"resize-none\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                {/* Payment Information */}\n                <div className=\"bg-card rounded-lg border p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <CreditCard className=\"h-5 w-5 text-primary mr-2\" />\n                    <h2 className=\"text-xl font-semibold\">Payment Method</h2>\n                  </div>\n                  \n                  <Separator className=\"mb-6\" />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"paymentMethod\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <RadioGroup\n                            onValueChange={field.onChange}\n                            defaultValue={field.value}\n                            className=\"space-y-4\"\n                          >\n                            <div className=\"flex items-center space-x-2 rounded-md border p-4 cursor-pointer hover:bg-accent hover:text-accent-foreground\">\n                              <RadioGroupItem value=\"creditCard\" id=\"creditCard\" />\n                              <Label htmlFor=\"creditCard\" className=\"flex-1 cursor-pointer\">\n                                <div className=\"flex items-center\">\n                                  <div className=\"w-8 h-5 mr-2 bg-primary/20 rounded flex items-center justify-center\">\n                                    <CreditCard className=\"h-3 w-3 text-primary\" />\n                                  </div>\n                                  Credit / Debit Card\n                                </div>\n                                <p className=\"text-xs text-muted-foreground mt-1\">\n                                  Secure payment with credit or debit card\n                                </p>\n                              </Label>\n                              <div className=\"flex space-x-1\">\n                                <div className=\"w-8 h-5 bg-blue-600 rounded\"></div>\n                                <div className=\"w-8 h-5 bg-red-600 rounded\"></div>\n                                <div className=\"w-8 h-5 bg-yellow-600 rounded\"></div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center space-x-2 rounded-md border p-4 cursor-pointer hover:bg-accent hover:text-accent-foreground\">\n                              <RadioGroupItem value=\"paypal\" id=\"paypal\" />\n                              <Label htmlFor=\"paypal\" className=\"flex-1 cursor-pointer\">\n                                <div className=\"flex items-center\">\n                                  <div className=\"w-8 h-5 mr-2 bg-blue-500/20 rounded flex items-center justify-center\">\n                                    <span className=\"text-xs font-bold text-blue-600\">P</span>\n                                  </div>\n                                  PayPal\n                                </div>\n                                <p className=\"text-xs text-muted-foreground mt-1\">\n                                  Fast and secure payment with PayPal\n                                </p>\n                              </Label>\n                            </div>\n                          </RadioGroup>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  {/* Save Payment Information */}\n                  <FormField\n                    control={form.control}\n                    name=\"savePaymentInfo\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center space-x-2 mt-4\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <FormLabel className=\"text-sm font-normal cursor-pointer\">\n                          Save my payment information for future purchases\n                        </FormLabel>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  {/* Simulated Payment Form (Credit Card) */}\n                  {form.watch(\"paymentMethod\") === \"creditCard\" && (\n                    <div className=\"mt-4 space-y-4\">\n                      <div>\n                        <Label htmlFor=\"cardName\">Name on Card</Label>\n                        <Input id=\"cardName\" placeholder=\"John Doe\" disabled={isSubmitting} />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"cardNumber\">Card Number</Label>\n                        <Input id=\"cardNumber\" placeholder=\"1234 5678 9012 3456\" disabled={isSubmitting} />\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"expiry\">Expiry Date</Label>\n                          <Input id=\"expiry\" placeholder=\"MM/YY\" disabled={isSubmitting} />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"cvv\">CVV</Label>\n                          <Input id=\"cvv\" placeholder=\"123\" type=\"password\" disabled={isSubmitting} />\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n                \n                {/* Terms and Conditions */}\n                <div className=\"bg-card rounded-lg border p-6\">\n                  <div className=\"space-y-4\">\n                    {/* For new users */}\n                    {!isAuthenticated && (\n                      <FormField\n                        control={form.control}\n                        name=\"createAccount\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex items-start space-x-2\">\n                            <FormControl>\n                              <Checkbox\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                              />\n                            </FormControl>\n                            <div className=\"space-y-1 leading-none\">\n                              <FormLabel className=\"text-sm font-normal cursor-pointer\">\n                                Create an account for faster checkout in the future\n                              </FormLabel>\n                            </div>\n                          </FormItem>\n                        )}\n                      />\n                    )}\n                    \n                    {/* Terms and Conditions */}\n                    <FormField\n                      control={form.control}\n                      name=\"agreeToTerms\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex items-start space-x-2\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-sm font-normal cursor-pointer\">\n                              I agree to the <a href=\"/terms\" className=\"text-primary hover:underline\">Terms and Conditions</a> and <a href=\"/privacy\" className=\"text-primary hover:underline\">Privacy Policy</a>\n                            </FormLabel>\n                            <FormMessage />\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    {/* Secure Checkout Notice */}\n                    <div className=\"flex items-center text-sm text-muted-foreground mt-4\">\n                      <ShieldCheck className=\"h-4 w-4 mr-2 text-green-500\" />\n                      Your personal data will be used to process your order, support your experience, and for other purposes described in our privacy policy.\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Place Order Button (Mobile) */}\n                <div className=\"lg:hidden\">\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full text-lg\" \n                    size=\"lg\"\n                    disabled={isSubmitting}\n                  >\n                    {isSubmitting ? (\n                      <span className=\"flex items-center\">\n                        <div className=\"animate-spin mr-2 h-4 w-4 border-2 border-current border-t-transparent rounded-full\"></div>\n                        Processing...\n                      </span>\n                    ) : (\n                      <span className=\"flex items-center\">\n                        Place Order \n                        <ChevronRight className=\"ml-2 h-4 w-4\" />\n                      </span>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </div>\n          \n          {/* Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-card rounded-lg border shadow-sm sticky top-24\">\n              <div className=\"p-6\">\n                <h2 className=\"text-xl font-semibold mb-4\">Order Summary</h2>\n                \n                <Separator className=\"mb-4\" />\n                \n                <CartSummary \n                  items={items} \n                  showItemList={true}\n                  showCheckoutButton={false}\n                />\n                \n                {/* Place Order Button (Desktop) */}\n                <div className=\"hidden lg:block mt-6\">\n                  <Button \n                    onClick={form.handleSubmit(onSubmit)}\n                    className=\"w-full text-lg\" \n                    size=\"lg\"\n                    disabled={isSubmitting}\n                  >\n                    {isSubmitting ? (\n                      <span className=\"flex items-center\">\n                        <div className=\"animate-spin mr-2 h-4 w-4 border-2 border-current border-t-transparent rounded-full\"></div>\n                        Processing...\n                      </span>\n                    ) : (\n                      <span className=\"flex items-center\">\n                        Place Order \n                        <ChevronRight className=\"ml-2 h-4 w-4\" />\n                      </span>\n                    )}\n                  </Button>\n                </div>\n                \n                {/* Secure Checkout Badge */}\n                <div className=\"mt-6 flex items-center justify-center text-xs text-muted-foreground\">\n                  <ShieldCheck className=\"h-4 w-4 mr-1.5 text-green-500\" />\n                  Secure Checkout\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":26886},"client/src/pages/Customize.tsx":{"content":"import { useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/context/AuthContext';\nimport { ThreeViewer } from '@/components/ui/three-viewer';\nimport CustomizerControls from '@/components/customize/CustomizerControls';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Separator } from '@/components/ui/separator';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { AlertCircle, Upload, Clock, Loader2, CheckCircle, ShoppingCart, CloudUpload } from 'lucide-react';\n\ninterface CustomizationOptions {\n  model: string;\n  material: string;\n  color: string;\n  scale: number;\n  text: string;\n}\n\nexport default function Customize() {\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState('customize');\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadSuccess, setUploadSuccess] = useState(false);\n  const [customization, setCustomization] = useState<CustomizationOptions>({\n    model: '/models/phone-stand.gltf', // Default model\n    material: 'PLA',\n    color: '#6D28D9', // Default to primary color\n    scale: 1,\n    text: '',\n  });\n  \n  // Sample predefined models\n  const predefinedModels = [\n    { id: 'phone-stand', name: 'Phone Stand', model: '/models/phone-stand.gltf', price: 24.99 },\n    { id: 'desk-organizer', name: 'Desk Organizer', model: '/models/organizer.gltf', price: 34.99 },\n    { id: 'planter', name: 'Planter Pot', model: '/models/planter.gltf', price: 29.99 },\n  ];\n  \n  // Handle customization changes\n  const handleCustomizationChange = (key: keyof CustomizationOptions, value: any) => {\n    setCustomization(prev => ({ ...prev, [key]: value }));\n  };\n  \n  // Handle model change\n  const handleModelChange = (modelId: string) => {\n    const model = predefinedModels.find(m => m.id === modelId);\n    if (model) {\n      handleCustomizationChange('model', model.model);\n    }\n  };\n  \n  // Handle file upload simulation\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files || e.target.files.length === 0) return;\n    \n    const file = e.target.files[0];\n    \n    // Check file size (max 50MB)\n    if (file.size > 50 * 1024 * 1024) {\n      toast({\n        title: \"File Too Large\",\n        description: \"Maximum file size is 50MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Check file extension\n    const validExtensions = ['.stl', '.obj', '.gltf', '.glb'];\n    const fileExtension = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();\n    \n    if (!validExtensions.includes(fileExtension)) {\n      toast({\n        title: \"Invalid File Type\",\n        description: \"Please upload an STL, OBJ, GLTF, or GLB file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Simulate upload\n    setIsUploading(true);\n    \n    setTimeout(() => {\n      setIsUploading(false);\n      setUploadSuccess(true);\n      \n      // Reset after 3 seconds\n      setTimeout(() => {\n        setUploadSuccess(false);\n      }, 3000);\n      \n      toast({\n        title: \"File Uploaded Successfully\",\n        description: `${file.name} has been uploaded and is ready for customization.`,\n      });\n    }, 2000);\n  };\n  \n  // Handle add to cart\n  const handleAddToCart = () => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please sign in to save your custom design.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    toast({\n      title: \"Custom Design Added\",\n      description: \"Your custom design has been added to your cart.\",\n    });\n  };\n  \n  // Calculate estimated price based on options\n  const calculatePrice = () => {\n    let basePrice = 29.99;\n    \n    // Add material cost\n    if (customization.material === 'ABS') basePrice += 5;\n    if (customization.material === 'PETG') basePrice += 8;\n    if (customization.material === 'Resin') basePrice += 15;\n    \n    // Add scale cost\n    basePrice *= customization.scale;\n    \n    // Add text engraving cost\n    if (customization.text.trim().length > 0) {\n      basePrice += 5;\n    }\n    \n    return basePrice.toFixed(2);\n  };\n  \n  // Calculate estimated print time\n  const calculatePrintTime = () => {\n    let baseHours = 3;\n    \n    // Material affects print time\n    if (customization.material === 'ABS') baseHours += 1;\n    if (customization.material === 'Resin') baseHours += 2;\n    \n    // Scale affects print time exponentially\n    baseHours *= customization.scale * 1.5;\n    \n    const hours = Math.floor(baseHours);\n    const minutes = Math.round((baseHours - hours) * 60);\n    \n    return `${hours} hour${hours !== 1 ? 's' : ''} ${minutes > 0 ? `${minutes} min` : ''}`;\n  };\n  \n  return (\n    <>\n      <Helmet>\n        <title>Custom 3D Design Studio | 3D Print Wonders</title>\n        <meta name=\"description\" content=\"Create your own custom 3D-printed products. Choose from predefined models or upload your own design.\" />\n      </Helmet>\n      \n      <div className=\"container mx-auto px-4 py-10\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl md:text-4xl font-bold mb-4\">3D Customization Studio</h1>\n          <p className=\"text-muted-foreground max-w-3xl mx-auto\">\n            Design your perfect 3D-printed product by customizing our templates or uploading your own 3D model.\n            Personalize with different materials, colors, and custom text engraving.\n          </p>\n        </div>\n        \n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-8\">\n          <div className=\"flex justify-center\">\n            <TabsList className=\"w-full max-w-md\">\n              <TabsTrigger value=\"customize\" className=\"flex-1\">Customize Templates</TabsTrigger>\n              <TabsTrigger value=\"upload\" className=\"flex-1\">Upload Your Design</TabsTrigger>\n            </TabsList>\n          </div>\n          \n          <TabsContent value=\"customize\" className=\"space-y-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* 3D Model Viewer */}\n              <div className=\"lg:order-2\">\n                <div className=\"bg-card rounded-lg border overflow-hidden shadow-sm\">\n                  <ThreeViewer\n                    modelUrl={customization.model}\n                    height=\"400px\"\n                    className=\"w-full\"\n                    backgroundColor=\"transparent\"\n                    customizations={{\n                      color: customization.color,\n                      material: customization.material,\n                      scale: customization.scale,\n                    }}\n                  />\n                </div>\n                \n                {/* Estimated Production Info */}\n                <div className=\"mt-6 grid grid-cols-2 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-4 flex items-center\">\n                      <Clock className=\"h-8 w-8 text-primary mr-3\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Estimated Print Time</p>\n                        <p className=\"font-semibold\">{calculatePrintTime()}</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-4 flex items-center\">\n                      <div className=\"h-8 w-8 rounded-full bg-primary/10 text-primary flex items-center justify-center mr-3\">\n                        <span className=\"font-bold\">$</span>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Estimated Price</p>\n                        <p className=\"font-semibold\">${calculatePrice()}</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n              \n              {/* Customization Controls */}\n              <div className=\"lg:order-1\">\n                <CustomizerControls\n                  customization={customization}\n                  models={predefinedModels} \n                  onCustomizationChange={handleCustomizationChange}\n                  onModelChange={handleModelChange}\n                />\n                \n                <div className=\"mt-6\">\n                  <Button \n                    className=\"w-full flex items-center justify-center gap-2\" \n                    size=\"lg\"\n                    onClick={handleAddToCart}\n                  >\n                    <ShoppingCart className=\"h-5 w-5\" />\n                    Add Custom Design to Cart\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"upload\" className=\"space-y-8\">\n            <div className=\"max-w-3xl mx-auto\">\n              <div className=\"bg-card rounded-lg border p-6\">\n                <h2 className=\"text-xl font-semibold mb-4\">Upload Your Own 3D Model</h2>\n                \n                <p className=\"text-muted-foreground mb-6\">\n                  Have a 3D model ready? Upload your STL, OBJ, or GLTF file and we'll print it for you!\n                  Our experts will review your design to ensure it can be printed with high quality.\n                </p>\n                \n                <div className=\"border-2 border-dashed border-border rounded-lg p-8 text-center\">\n                  <CloudUpload className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n                  \n                  {isUploading ? (\n                    <div className=\"space-y-2\">\n                      <Loader2 className=\"h-6 w-6 animate-spin mx-auto\" />\n                      <p className=\"text-sm\">Uploading your file...</p>\n                    </div>\n                  ) : uploadSuccess ? (\n                    <div className=\"space-y-2\">\n                      <CheckCircle className=\"h-6 w-6 text-green-500 mx-auto\" />\n                      <p className=\"text-sm\">Upload successful!</p>\n                    </div>\n                  ) : (\n                    <>\n                      <p className=\"mb-4\">Drag and drop your 3D file here or</p>\n                      <label className=\"inline-flex items-center px-4 py-2 border border-primary text-primary rounded-md cursor-pointer hover:bg-primary hover:text-white transition-colors duration-300\">\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        Browse Files\n                        <input \n                          type=\"file\" \n                          className=\"hidden\" \n                          accept=\".stl,.obj,.gltf,.glb\"\n                          onChange={handleFileUpload}\n                        />\n                      </label>\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        Supported formats: STL, OBJ, GLTF, GLB. Maximum file size: 50MB\n                      </p>\n                    </>\n                  )}\n                </div>\n                \n                <Separator className=\"my-8\" />\n                \n                <h3 className=\"text-lg font-medium mb-4\">Design Specifications</h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"material\">Material</Label>\n                    <select \n                      id=\"material\" \n                      className=\"w-full rounded-md border border-input bg-transparent p-2\"\n                    >\n                      <option value=\"PLA\">PLA Standard</option>\n                      <option value=\"PLA-Premium\">PLA Premium</option>\n                      <option value=\"ABS\">ABS Durable</option>\n                      <option value=\"PETG\">PETG Flexible</option>\n                      <option value=\"Resin\">High-Detail Resin</option>\n                      <option value=\"Eco-PLA\">Eco-Friendly PLA</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"finish\">Surface Finish</Label>\n                    <select \n                      id=\"finish\" \n                      className=\"w-full rounded-md border border-input bg-transparent p-2\"\n                    >\n                      <option value=\"standard\">Standard (120 micron)</option>\n                      <option value=\"smooth\">Smooth (60 micron)</option>\n                      <option value=\"ultra\">Ultra-Detail (20 micron)</option>\n                      <option value=\"polished\">Polished</option>\n                    </select>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2 mb-6\">\n                  <Label htmlFor=\"scale\">Scale Factor</Label>\n                  <div className=\"flex items-center space-x-4\">\n                    <input \n                      type=\"range\" \n                      id=\"scale\" \n                      min=\"0.5\" \n                      max=\"2\" \n                      step=\"0.1\" \n                      defaultValue=\"1\"\n                      className=\"w-full h-2 bg-muted rounded-full appearance-none cursor-pointer accent-primary\"\n                    />\n                    <span className=\"min-w-12 text-center\">1.0x</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Adjust scale to change the size of your model\n                  </p>\n                </div>\n                \n                <div className=\"space-y-2 mb-6\">\n                  <Label htmlFor=\"notes\">Special Instructions</Label>\n                  <textarea \n                    id=\"notes\" \n                    rows={3}\n                    placeholder=\"Add any special instructions or requirements for your design\"\n                    className=\"w-full rounded-md border border-input bg-transparent p-3 resize-none\"\n                  ></textarea>\n                </div>\n                \n                <div className=\"rounded-lg bg-muted p-4 mb-6 flex items-start space-x-3\">\n                  <AlertCircle className=\"h-5 w-5 text-muted-foreground mt-0.5\" />\n                  <div>\n                    <p className=\"text-sm font-medium\">Design Review Process</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Our team will review your model for printability within 24 hours. You may be contacted if any adjustments are needed.\n                    </p>\n                  </div>\n                </div>\n                \n                <Button className=\"w-full\" size=\"lg\">\n                  Request Quote for Custom Design\n                </Button>\n              </div>\n              \n              <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Card>\n                  <CardContent className=\"p-6 text-center\">\n                    <div className=\"h-12 w-12 rounded-full bg-primary/10 mx-auto flex items-center justify-center mb-4\">\n                      <Upload className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <h3 className=\"text-lg font-medium mb-1\">Upload</h3>\n                    <p className=\"text-sm text-muted-foreground\">Submit your 3D model file</p>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardContent className=\"p-6 text-center\">\n                    <div className=\"h-12 w-12 rounded-full bg-primary/10 mx-auto flex items-center justify-center mb-4\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-primary\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\" />\n                      </svg>\n                    </div>\n                    <h3 className=\"text-lg font-medium mb-1\">Review</h3>\n                    <p className=\"text-sm text-muted-foreground\">Our experts check printability</p>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardContent className=\"p-6 text-center\">\n                    <div className=\"h-12 w-12 rounded-full bg-primary/10 mx-auto flex items-center justify-center mb-4\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-primary\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5\" />\n                      </svg>\n                    </div>\n                    <h3 className=\"text-lg font-medium mb-1\">Approve</h3>\n                    <p className=\"text-sm text-muted-foreground\">Confirm quote and begin printing</p>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </>\n  );\n}\n","size_bytes":17715},"client/src/pages/Home.tsx":{"content":"import { Helmet } from 'react-helmet';\nimport Hero from '@/components/home/Hero';\nimport Categories from '@/components/home/Categories';\nimport FeaturedProducts from '@/components/home/FeaturedProducts';\nimport Features from '@/components/home/Features';\nimport Testimonials from '@/components/home/Testimonials';\nimport Newsletter from '@/components/home/Newsletter';\n\nexport default function Home() {\n  return (\n    <>\n      <Helmet>\n        <title>3D Print Wonders | Next-Gen 3D Printed Gadgets</title>\n        <meta \n          name=\"description\" \n          content=\"Shop innovative 3D-printed gadgets, tech accessories, and collectibles with customization options and interactive 3D previews.\"\n        />\n      </Helmet>\n      \n      <div className=\"flex flex-col min-h-screen\">\n        <Hero />\n        <Categories />\n        <FeaturedProducts />\n        <Features />\n        <Testimonials />\n        <Newsletter />\n      </div>\n    </>\n  );\n}\n","size_bytes":949},"client/src/pages/Login.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Helmet } from 'react-helmet';\nimport { useAuth } from '@/context/AuthContext';\nimport { z } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { \n  Form, \n  FormControl, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2 } from 'lucide-react';\n\n// Login form schema\nconst loginSchema = z.object({\n  email: z.string()\n    .email('Please enter a valid email address'),\n  password: z.string()\n    .min(6, 'Password must be at least 6 characters'),\n  rememberMe: z.boolean().default(false),\n});\n\ntype LoginFormValues = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [location, navigate] = useLocation();\n  const { login, isAuthenticated, loading } = useAuth();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    navigate('/');\n    return null;\n  }\n  \n  // Form definition\n  const form = useForm<LoginFormValues>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n    },\n  });\n  \n  // Handle form submission\n  const onSubmit = async (data: LoginFormValues) => {\n    setIsSubmitting(true);\n    try {\n      const success = await login(data.email, data.password);\n      \n      if (success) {\n        // Redirect after successful login\n        // Check if there's a return_to parameter in the URL\n        const params = new URLSearchParams(window.location.search);\n        const returnTo = params.get('return_to');\n        \n        navigate(returnTo || '/');\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  return (\n    <>\n      <Helmet>\n        <title>Sign In | 3D Print Wonders</title>\n        <meta name=\"description\" content=\"Sign in to your 3D Print Wonders account to view your orders, manage your profile, and checkout faster.\" />\n      </Helmet>\n      \n      <div className=\"container max-w-md mx-auto px-4 py-16\">\n        <Card className=\"border shadow-sm\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-bold text-center\">Sign In</CardTitle>\n            <CardDescription className=\"text-center\">\n              Enter your email and password to access your account\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"email@example.com\" \n                          {...field} \n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <div className=\"flex items-center justify-between\">\n                        <FormLabel>Password</FormLabel>\n                        <Link href=\"/forgot-password\">\n                          <a className=\"text-xs text-primary hover:underline\">\n                            Forgot password?\n                          </a>\n                        </Link>\n                      </div>\n                      <FormControl>\n                        <Input \n                          type=\"password\" \n                          placeholder=\"••••••••\" \n                          {...field} \n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"rememberMe\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center space-x-2\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <FormLabel className=\"text-sm font-normal cursor-pointer\">\n                        Remember me for 30 days\n                      </FormLabel>\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isSubmitting}\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> \n                      Signing In...\n                    </>\n                  ) : (\n                    \"Sign In\"\n                  )}\n                </Button>\n              </form>\n            </Form>\n            \n            <div className=\"mt-4 relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <Separator className=\"w-full\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-card px-2 text-muted-foreground\">\n                  Or continue with\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4 mt-4\">\n              <Button variant=\"outline\" type=\"button\" disabled={isSubmitting}>\n                <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n                  <path\n                    d=\"M12.0003 4.75C13.7703 4.75 15.3553 5.36002 16.6053 6.54998L20.0303 3.125C17.9502 1.19 15.2353 0 12.0003 0C7.31028 0 3.25526 2.69 1.28027 6.60998L5.27028 9.70498C6.21525 6.86002 8.87028 4.75 12.0003 4.75Z\"\n                    fill=\"#EA4335\"\n                  />\n                  <path\n                    d=\"M23.49 12.275C23.49 11.49 23.415 10.73 23.3 10H12V14.51H18.47C18.18 15.99 17.34 17.25 16.08 18.08L19.945 21.06C22.2 19.01 23.49 15.92 23.49 12.275Z\"\n                    fill=\"#4285F4\"\n                  />\n                  <path\n                    d=\"M5.26498 14.2949C5.02498 13.5699 4.88501 12.7999 4.88501 11.9999C4.88501 11.1999 5.01998 10.4299 5.26498 9.7049L1.275 6.60986C0.46 8.22986 0 10.0599 0 11.9999C0 13.9399 0.46 15.7699 1.28 17.3899L5.26498 14.2949Z\"\n                    fill=\"#FBBC05\"\n                  />\n                  <path\n                    d=\"M12.0004 24.0001C15.2404 24.0001 17.9654 22.935 19.9454 21.06L16.0804 18.08C15.0454 18.77 13.6954 19.2001 12.0004 19.2001C8.8704 19.2001 6.21537 17.09 5.2654 14.295L1.27539 17.39C3.25537 21.31 7.3104 24.0001 12.0004 24.0001Z\"\n                    fill=\"#34A853\"\n                  />\n                </svg>\n                Google\n              </Button>\n              \n              <Button variant=\"outline\" type=\"button\" disabled={isSubmitting}>\n                <svg viewBox=\"0 0 24 24\" className=\"mr-2 h-4 w-4 fill-current\">\n                  <path d=\"M16.365 1.43c0 1.14-.788 2.165-1.854 2.717.466 1.46 1.334 2.731 2.415 3.572.304-.14.688-.225 1.141-.225a4.18 4.18 0 0 1 1.343.224 8.337 8.337 0 0 1-1.76 3.826 6.413 6.413 0 0 1-1.856 1.562 10.161 10.161 0 0 1-2.732.799c-2.285.333-4.658-.254-6.53-1.644-1.73-1.29-2.876-3.18-3.261-5.288a6.783 6.783 0 0 1-.143-1.403A6.642 6.642 0 0 1 3.995 2.45c.493-.59 1.146-.902 1.852-.865.653.036 1.329.377 1.957.88h.01l.138.135a1.4 1.4 0 0 0 1.25.547 1.398 1.398 0 0 0 1.25-.546l.137-.136a4.63 4.63 0 0 1 1.096-.61 4.108 4.108 0 0 1 1.035-.26c.661-.077 1.29.011 1.801.261.661.324 1.108.836 1.253 1.481.145.645-.05 1.365-.536 2.094Zm-7.25 8.955a7.025 7.025 0 0 0-1.2-1.148 6.967 6.967 0 0 0-1.547-.75 7.027 7.027 0 0 0-1.158-.224 4.283 4.283 0 0 0-.363-.012c-.628 0-1.011.149-1.163.257a.389.389 0 0 0-.146.23.367.367 0 0 0 .12.33l.038.03c.051.04.133.094.248.147.32.147.842.323 1.588.323a5.548 5.548 0 0 0 1.692-.268 4.625 4.625 0 0 0 1.109-.54 4.841 4.841 0 0 0 .953-.83c-.08-.05-.163-.099-.247-.146a6.308 6.308 0 0 0-.924-.4Z\" />\n                </svg>\n                Apple\n              </Button>\n            </div>\n          </CardContent>\n          \n          <CardFooter className=\"flex justify-center\">\n            <p className=\"text-center text-sm text-muted-foreground\">\n              Don't have an account?{' '}\n              <Link href=\"/register\">\n                <a className=\"text-primary hover:underline\">\n                  Sign up\n                </a>\n              </Link>\n            </p>\n          </CardFooter>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":9583},"client/src/pages/ProductDetails.tsx":{"content":"import { useState } from 'react';\nimport { useParams, Link } from 'wouter';\nimport { Helmet } from 'react-helmet';\nimport { useProduct } from '@/hooks/useProducts';\nimport { useAuth } from '@/context/AuthContext';\nimport { useCart } from '@/context/CartContext';\nimport { ThreeViewer } from '@/components/ui/three-viewer';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Separator } from '@/components/ui/separator';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Breadcrumb, BreadcrumbItem, BreadcrumbLink } from '@/components/ui/breadcrumb';\nimport { Badge } from '@/components/ui/badge';\nimport { Heart, ShoppingCart, Share2, Star, Clock, Truck, Check, AlertCircle, Minus, Plus, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ProductCustomization {\n  color?: string;\n  material?: string;\n  size?: string;\n  text?: string;\n}\n\nexport default function ProductDetails() {\n  const { slug } = useParams<{ slug: string }>();\n  const { data: product, isLoading, error } = useProduct(slug);\n  const { isAuthenticated } = useAuth();\n  const { addItem } = useCart();\n  const { toast } = useToast();\n\n  const [quantity, setQuantity] = useState(1);\n  const [activeImageIndex, setActiveImageIndex] = useState(0);\n  const [customization, setCustomization] = useState<ProductCustomization>({\n    color: undefined,\n    material: undefined,\n    size: undefined,\n    text: '',\n  });\n\n  const handleQuantityChange = (value: number) => {\n    const newQuantity = Math.max(1, Math.min(value, product?.stock || 10));\n    setQuantity(newQuantity);\n  };\n\n  const handleColorChange = (color: string) => {\n    setCustomization(prev => ({ ...prev, color }));\n  };\n\n  const handleMaterialChange = (material: string) => {\n    setCustomization(prev => ({ ...prev, material }));\n  };\n\n  const handleSizeChange = (size: string) => {\n    setCustomization(prev => ({ ...prev, size }));\n  };\n\n  const handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCustomization(prev => ({ ...prev, text: e.target.value }));\n  };\n\n  const handleAddToCart = async () => {\n    if (!product) return;\n    \n    if (!isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to add items to your cart.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    try {\n      await addItem(\n        product.id, \n        quantity, \n        Object.keys(customization).length ? customization : undefined\n      );\n    } catch (error) {\n      console.error('Failed to add to cart:', error);\n    }\n  };\n\n  // Helper to format price\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(price);\n  };\n\n  // Calculate stock status\n  const getStockStatus = (stock: number) => {\n    if (stock > 20) return { text: 'In Stock', color: 'text-green-500' };\n    if (stock > 0) return { text: `Only ${stock} left`, color: 'text-amber-500' };\n    return { text: 'Out of Stock', color: 'text-red-500' };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-12\">\n          <div className=\"space-y-4\">\n            <Skeleton className=\"h-96 w-full rounded-lg\" />\n            <div className=\"grid grid-cols-4 gap-2\">\n              <Skeleton className=\"h-20 w-full rounded-md\" />\n              <Skeleton className=\"h-20 w-full rounded-md\" />\n              <Skeleton className=\"h-20 w-full rounded-md\" />\n              <Skeleton className=\"h-20 w-full rounded-md\" />\n            </div>\n          </div>\n          <div className=\"space-y-4\">\n            <Skeleton className=\"h-10 w-3/4\" />\n            <Skeleton className=\"h-6 w-1/4\" />\n            <Skeleton className=\"h-6 w-1/3\" />\n            <Skeleton className=\"h-32 w-full\" />\n            <div className=\"space-y-2\">\n              <Skeleton className=\"h-8 w-full\" />\n              <Skeleton className=\"h-8 w-full\" />\n              <Skeleton className=\"h-8 w-full\" />\n            </div>\n            <Skeleton className=\"h-12 w-full\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !product) {\n    return (\n      <div className=\"container mx-auto px-4 py-16 text-center\">\n        <AlertCircle className=\"h-12 w-12 mx-auto text-destructive mb-4\" />\n        <h1 className=\"text-2xl font-bold mb-2\">Product Not Found</h1>\n        <p className=\"text-muted-foreground mb-6\">\n          We couldn't find the product you're looking for.\n        </p>\n        <Button asChild>\n          <Link href=\"/products\">Browse All Products</Link>\n        </Button>\n      </div>\n    );\n  }\n\n  const stockStatus = getStockStatus(product.stock);\n  const showSalePrice = product.salePrice !== null && product.salePrice < product.price;\n  const productPrice = showSalePrice ? product.salePrice! : product.price;\n  const discount = showSalePrice ? Math.round((1 - product.salePrice! / product.price) * 100) : 0;\n  const attributes = product.attributes as any || {};\n  const images = product.imageUrls || [];\n\n  return (\n    <>\n      <Helmet>\n        <title>{`${product.name} | 3D Print Wonders`}</title>\n        <meta name=\"description\" content={product.description || `Shop the ${product.name} - a premium 3D printed product from 3D Print Wonders.`} />\n      </Helmet>\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Breadcrumbs */}\n        <Breadcrumb className=\"mb-8\">\n          <BreadcrumbItem>\n            <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <BreadcrumbLink href=\"/products\">Products</BreadcrumbLink>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <BreadcrumbLink>{product.name}</BreadcrumbLink>\n          </BreadcrumbItem>\n        </Breadcrumb>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Product Images and 3D Viewer */}\n          <div className=\"space-y-4\">\n            <div className=\"relative h-96 bg-card rounded-lg overflow-hidden border\">\n              {/* Show 3D model if available, otherwise show image */}\n              {product.modelUrl ? (\n                <ThreeViewer \n                  modelUrl={product.modelUrl} \n                  height=\"100%\" \n                  customizations={{\n                    color: customization.color,\n                    material: customization.material,\n                    scale: 1\n                  }}\n                />\n              ) : (\n                <img \n                  src={images[activeImageIndex] || ''} \n                  alt={product.name} \n                  className=\"w-full h-full object-contain p-4\"\n                />\n              )}\n              \n              {/* Sale badge */}\n              {showSalePrice && (\n                <div className=\"absolute top-4 left-4 z-10\">\n                  <Badge variant=\"destructive\" className=\"text-sm font-semibold\">\n                    {discount}% OFF\n                  </Badge>\n                </div>\n              )}\n            </div>\n            \n            {/* Thumbnails */}\n            {images.length > 1 && (\n              <div className=\"grid grid-cols-5 gap-2\">\n                {images.map((image, index) => (\n                  <button\n                    key={index}\n                    className={`rounded-md overflow-hidden border transition ${\n                      index === activeImageIndex \n                        ? 'border-primary ring-2 ring-primary/20' \n                        : 'border-border hover:border-primary/50'\n                    }`}\n                    onClick={() => setActiveImageIndex(index)}\n                  >\n                    <img src={image} alt={`${product.name} view ${index + 1}`} className=\"w-full h-16 object-cover\" />\n                  </button>\n                ))}\n                \n                {/* Add 3D View button if model is available */}\n                {product.modelUrl && (\n                  <button\n                    className={`rounded-md overflow-hidden border flex items-center justify-center bg-primary/10 transition hover:bg-primary/20 text-primary`}\n                    onClick={() => setActiveImageIndex(-1)}\n                  >\n                    <span className=\"text-xs font-medium\">3D View</span>\n                  </button>\n                )}\n              </div>\n            )}\n          </div>\n          \n          {/* Product Info */}\n          <div className=\"space-y-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold\">{product.name}</h1>\n              \n              {/* Rating */}\n              <div className=\"flex items-center mt-2 mb-4\">\n                <div className=\"flex text-yellow-500\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <Star \n                      key={i} \n                      className={`h-4 w-4 ${i < Math.floor(product.rating) ? 'fill-current' : 'fill-none'}`} \n                    />\n                  ))}\n                </div>\n                <span className=\"ml-2 text-sm\">\n                  {product.rating.toFixed(1)} ({product.reviewCount} reviews)\n                </span>\n              </div>\n              \n              {/* Price */}\n              <div className=\"flex items-baseline\">\n                {showSalePrice ? (\n                  <>\n                    <span className=\"text-2xl font-bold text-primary\">{formatPrice(product.salePrice!)}</span>\n                    <span className=\"ml-2 text-muted-foreground line-through\">{formatPrice(product.price)}</span>\n                  </>\n                ) : (\n                  <span className=\"text-2xl font-bold\">{formatPrice(product.price)}</span>\n                )}\n              </div>\n            </div>\n            \n            {/* Description */}\n            <p className=\"text-muted-foreground\">{product.description}</p>\n            \n            {/* Availability */}\n            <div className=\"flex items-center\">\n              <span className={`font-medium ${stockStatus.color}`}>\n                {stockStatus.text}\n              </span>\n              {product.stock > 0 && (\n                <span className=\"text-sm text-muted-foreground ml-2\">\n                  Usually ships in 2-3 business days\n                </span>\n              )}\n            </div>\n            \n            <Separator />\n            \n            {/* Customization Options */}\n            <div className=\"space-y-4\">\n              {/* Colors */}\n              {attributes.colors && attributes.colors.length > 0 && (\n                <div>\n                  <label className=\"text-sm font-medium mb-1.5 block\">Color</label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {attributes.colors.map((color: string) => (\n                      <button\n                        key={color}\n                        className={`w-8 h-8 rounded-full transition ${\n                          customization.color === color \n                            ? 'ring-2 ring-primary ring-offset-2 ring-offset-background' \n                            : 'ring-1 ring-border hover:ring-primary/50'\n                        }`}\n                        style={{ backgroundColor: color }}\n                        onClick={() => handleColorChange(color)}\n                        aria-label={`Select ${color} color`}\n                      />\n                    ))}\n                  </div>\n                </div>\n              )}\n              \n              {/* Materials */}\n              {attributes.materials && attributes.materials.length > 0 && (\n                <div>\n                  <label className=\"text-sm font-medium mb-1.5 block\">Material</label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {attributes.materials.map((material: string) => (\n                      <Button\n                        key={material}\n                        variant={customization.material === material ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => handleMaterialChange(material)}\n                      >\n                        {material}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              )}\n              \n              {/* Sizes */}\n              {attributes.sizes && attributes.sizes.length > 0 && (\n                <div>\n                  <label className=\"text-sm font-medium mb-1.5 block\">Size</label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {attributes.sizes.map((size: string) => (\n                      <Button\n                        key={size}\n                        variant={customization.size === size ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => handleSizeChange(size)}\n                      >\n                        {size}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              )}\n              \n              {/* Custom Text Engraving */}\n              <div>\n                <label className=\"text-sm font-medium mb-1.5 block\">Custom Text (Optional)</label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Add custom text or initials\"\n                  maxLength={30}\n                  value={customization.text}\n                  onChange={handleTextChange}\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Max 30 characters. Will be engraved on the product.\n                </p>\n              </div>\n            </div>\n            \n            {/* Quantity and Add to Cart */}\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              {/* Quantity Selector */}\n              <div className=\"flex border rounded-md max-w-[120px]\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"rounded-none\"\n                  onClick={() => handleQuantityChange(quantity - 1)}\n                  disabled={quantity <= 1}\n                >\n                  <Minus className=\"h-4 w-4\" />\n                </Button>\n                <Input\n                  type=\"number\"\n                  min=\"1\"\n                  max={product.stock}\n                  value={quantity}\n                  onChange={(e) => handleQuantityChange(parseInt(e.target.value))}\n                  className=\"border-0 rounded-none text-center [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                />\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"rounded-none\"\n                  onClick={() => handleQuantityChange(quantity + 1)}\n                  disabled={quantity >= product.stock}\n                >\n                  <Plus className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              <div className=\"flex-1 grid grid-cols-1 sm:grid-cols-[1fr_auto] gap-2\">\n                <Button \n                  size=\"lg\" \n                  className=\"w-full flex items-center gap-2\"\n                  onClick={handleAddToCart}\n                  disabled={product.stock <= 0}\n                >\n                  <ShoppingCart className=\"h-5 w-5\" />\n                  Add to Cart\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  size=\"icon\" \n                  className=\"sm:h-12 sm:w-12\"\n                  aria-label=\"Add to wishlist\"\n                >\n                  <Heart className=\"h-5 w-5\" />\n                </Button>\n              </div>\n            </div>\n            \n            {/* Product Information Tabs */}\n            <div className=\"mt-10\">\n              <Tabs defaultValue=\"details\">\n                <TabsList className=\"w-full grid grid-cols-3\">\n                  <TabsTrigger value=\"details\">Details</TabsTrigger>\n                  <TabsTrigger value=\"shipping\">Shipping</TabsTrigger>\n                  <TabsTrigger value=\"reviews\">Reviews</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"details\" className=\"mt-4 space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <h3 className=\"text-sm font-medium\">Print Material</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {attributes.materials?.join(', ') || 'PLA, ABS, PETG'}\n                      </p>\n                    </div>\n                    <div>\n                      <h3 className=\"text-sm font-medium\">Dimensions</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {attributes.dimensions || 'Varies by customization'}\n                      </p>\n                    </div>\n                    <div>\n                      <h3 className=\"text-sm font-medium\">Print Time</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {attributes.printTime || 'Approximately 4-6 hours'}\n                      </p>\n                    </div>\n                    <div>\n                      <h3 className=\"text-sm font-medium\">Care Instructions</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Clean with damp cloth. Avoid direct sunlight.\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"text-sm font-medium\">Product Tags</h3>\n                    <div className=\"flex flex-wrap gap-1 mt-1\">\n                      {product.tags?.map((tag) => (\n                        <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"shipping\" className=\"mt-4 space-y-4\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start gap-2\">\n                      <Truck className=\"h-5 w-5 text-primary mt-0.5\" />\n                      <div>\n                        <h3 className=\"text-sm font-medium\">Free Shipping</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          On orders over $50. Otherwise, flat rate of $5.99.\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-start gap-2\">\n                      <Clock className=\"h-5 w-5 text-primary mt-0.5\" />\n                      <div>\n                        <h3 className=\"text-sm font-medium\">Production Time</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Each item is 3D printed on demand, which takes 1-2 business days.\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-start gap-2\">\n                      <Check className=\"h-5 w-5 text-primary mt-0.5\" />\n                      <div>\n                        <h3 className=\"text-sm font-medium\">Returns</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          30-day money-back guarantee for undamaged items. Customized items cannot be returned.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"reviews\" className=\"mt-4\">\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-muted-foreground\">\n                      Reviews are coming soon! Be the first to review this product.\n                    </p>\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </div>\n            \n            {/* Share */}\n            <div className=\"flex items-center pt-4 border-t\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-sm\">\n                <Share2 className=\"h-4 w-4 mr-2\" />\n                Share This Product\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":20787},"client/src/pages/Products.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation, useSearch } from 'wouter';\nimport { Helmet } from 'react-helmet';\nimport { useProducts } from '@/hooks/useProducts';\nimport { useCategories } from '@/hooks/useCategories';\nimport ProductGrid from '@/components/product/ProductGrid';\nimport ProductFilter from '@/components/product/ProductFilter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Separator } from '@/components/ui/separator';\nimport { Breadcrumb, BreadcrumbItem, BreadcrumbLink } from '@/components/ui/breadcrumb';\nimport { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from '@/components/ui/pagination';\nimport { Search, Home, Filter, SlidersHorizontal } from 'lucide-react';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface ProductFilters {\n  category?: string;\n  minPrice?: number;\n  maxPrice?: number;\n  sort?: string;\n  search?: string;\n}\n\nexport default function Products() {\n  const [_, setLocation] = useLocation();\n  const search = useSearch();\n  const searchParams = new URLSearchParams(search);\n  \n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState<ProductFilters>(() => ({\n    category: searchParams.get('category') || undefined,\n    minPrice: searchParams.get('minPrice') ? Number(searchParams.get('minPrice')) : undefined,\n    maxPrice: searchParams.get('maxPrice') ? Number(searchParams.get('maxPrice')) : undefined,\n    sort: searchParams.get('sort') || undefined,\n    search: searchParams.get('search') || undefined,\n  }));\n  const [searchInput, setSearchInput] = useState(filters.search || '');\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n  \n  const limit = 12;\n  const offset = (page - 1) * limit;\n  \n  // Fetch products with filters\n  const { data, isLoading, error } = useProducts({\n    limit,\n    offset,\n    category: filters.category,\n    minPrice: filters.minPrice,\n    maxPrice: filters.maxPrice,\n    sort: filters.sort,\n    search: filters.search\n  });\n  \n  // Fetch categories for filter\n  const { data: categoriesData } = useCategories();\n  \n  // Update URL when filters change\n  useEffect(() => {\n    const params = new URLSearchParams();\n    \n    if (filters.category) params.set('category', filters.category);\n    if (filters.minPrice !== undefined) params.set('minPrice', filters.minPrice.toString());\n    if (filters.maxPrice !== undefined) params.set('maxPrice', filters.maxPrice.toString());\n    if (filters.sort) params.set('sort', filters.sort);\n    if (filters.search) params.set('search', filters.search);\n    \n    const queryString = params.toString();\n    setLocation(`/products${queryString ? `?${queryString}` : ''}`, { replace: true });\n  }, [filters, setLocation]);\n  \n  // Handle search submission\n  const handleSearchSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setFilters(prev => ({ ...prev, search: searchInput }));\n    setPage(1); // Reset to first page on new search\n  };\n  \n  // Handle filter changes\n  const handleFilterChange = (newFilters: Partial<ProductFilters>) => {\n    setFilters(prev => ({ ...prev, ...newFilters }));\n    setPage(1); // Reset to first page on filter change\n  };\n  \n  // Handle pagination\n  const handlePageChange = (newPage: number) => {\n    setPage(newPage);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n  \n  // Calculate total pages\n  const totalPages = data ? Math.ceil(data.pagination.total / limit) : 0;\n  \n  // Get active category name\n  const activeCategoryName = filters.category && categoriesData ? \n    categoriesData.find(c => c.slug === filters.category)?.name : \n    'All Products';\n  \n  return (\n    <>\n      <Helmet>\n        <title>Shop 3D Printed Products | 3D Print Wonders</title>\n        <meta \n          name=\"description\" \n          content=\"Browse our collection of 3D printed gadgets, tech accessories, and collectibles. Filter by category, price, and more.\"\n        />\n      </Helmet>\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Breadcrumbs */}\n        <Breadcrumb className=\"mb-4\">\n          <BreadcrumbItem>\n            <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <BreadcrumbLink href=\"/products\">Products</BreadcrumbLink>\n          </BreadcrumbItem>\n          {filters.category && (\n            <BreadcrumbItem>\n              <BreadcrumbLink>{activeCategoryName}</BreadcrumbLink>\n            </BreadcrumbItem>\n          )}\n        </Breadcrumb>\n        \n        <div className=\"flex flex-col space-y-6\">\n          {/* Title and Search */}\n          <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n            <h1 className=\"text-3xl font-bold\">\n              {filters.search ? `Search: \"${filters.search}\"` : activeCategoryName || 'All Products'}\n            </h1>\n            \n            <form onSubmit={handleSearchSubmit} className=\"w-full md:w-auto\">\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search products...\"\n                  className=\"w-full md:w-64 pl-10 rounded-full h-10\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                />\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              </div>\n            </form>\n          </div>\n          \n          {/* Mobile Filters Button */}\n          <div className=\"md:hidden\">\n            <Sheet open={isFilterOpen} onOpenChange={setIsFilterOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"outline\" className=\"w-full\">\n                  <Filter className=\"mr-2 h-4 w-4\" />\n                  Filters & Sorting\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"left\" className=\"w-[300px] sm:w-[400px]\">\n                <ScrollArea className=\"h-[calc(100vh-5rem)] pr-4\">\n                  <div className=\"py-6\">\n                    <h3 className=\"text-lg font-semibold mb-6\">Filters</h3>\n                    <ProductFilter \n                      categories={categoriesData || []}\n                      filters={filters}\n                      onChange={handleFilterChange}\n                      onClose={() => setIsFilterOpen(false)}\n                    />\n                  </div>\n                </ScrollArea>\n              </SheetContent>\n            </Sheet>\n          </div>\n          \n          {/* Desktop Layout with Sidebar */}\n          <div className=\"flex flex-col md:flex-row gap-8\">\n            {/* Desktop Filters Sidebar */}\n            <div className=\"hidden md:block w-64 flex-shrink-0\">\n              <div className=\"sticky top-24\">\n                <h3 className=\"text-lg font-semibold mb-6\">Filters</h3>\n                <ProductFilter \n                  categories={categoriesData || []}\n                  filters={filters}\n                  onChange={handleFilterChange}\n                />\n              </div>\n            </div>\n            \n            {/* Products Grid */}\n            <div className=\"flex-1\">\n              {/* Results Summary & Sort */}\n              <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6\">\n                <p className=\"text-muted-foreground mb-4 sm:mb-0\">\n                  {data ? \n                    `Showing ${data.products.length > 0 ? offset + 1 : 0}-${Math.min(offset + limit, data.pagination.total)} of ${data.pagination.total} products` : \n                    'Loading products...'}\n                </p>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <SlidersHorizontal className=\"h-4 w-4 text-muted-foreground\" />\n                  <select \n                    className=\"bg-transparent border-none text-sm focus:outline-none focus:ring-0\"\n                    value={filters.sort || ''}\n                    onChange={(e) => handleFilterChange({ sort: e.target.value || undefined })}\n                  >\n                    <option value=\"\">Sort by: Featured</option>\n                    <option value=\"price_asc\">Price: Low to High</option>\n                    <option value=\"price_desc\">Price: High to Low</option>\n                    <option value=\"newest\">Newest Arrivals</option>\n                    <option value=\"rating\">Best Rating</option>\n                  </select>\n                </div>\n              </div>\n              \n              {/* Products */}\n              <ProductGrid \n                products={data?.products || []}\n                isLoading={isLoading}\n                error={error ? 'Failed to load products' : undefined}\n              />\n              \n              {/* Pagination */}\n              {totalPages > 1 && (\n                <Pagination className=\"mt-8\">\n                  <PaginationContent>\n                    <PaginationItem>\n                      <PaginationPrevious\n                        onClick={() => page > 1 && handlePageChange(page - 1)}\n                        className={page <= 1 ? 'pointer-events-none opacity-50' : 'cursor-pointer'}\n                      />\n                    </PaginationItem>\n                    \n                    {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                      // Logic to show correct page numbers when total pages > 5\n                      let pageNum = i + 1;\n                      if (totalPages > 5) {\n                        if (page > 3 && page < totalPages - 1) {\n                          pageNum = page - 2 + i;\n                        } else if (page >= totalPages - 1) {\n                          pageNum = totalPages - 4 + i;\n                        }\n                      }\n                      \n                      return (\n                        <PaginationItem key={pageNum}>\n                          <PaginationLink\n                            isActive={page === pageNum}\n                            onClick={() => handlePageChange(pageNum)}\n                          >\n                            {pageNum}\n                          </PaginationLink>\n                        </PaginationItem>\n                      );\n                    })}\n                    \n                    <PaginationItem>\n                      <PaginationNext\n                        onClick={() => page < totalPages && handlePageChange(page + 1)}\n                        className={page >= totalPages ? 'pointer-events-none opacity-50' : 'cursor-pointer'}\n                      />\n                    </PaginationItem>\n                  </PaginationContent>\n                </Pagination>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":10973},"client/src/pages/Profile.tsx":{"content":"import { useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useAuth } from '@/context/AuthContext';\nimport { useLocation } from 'wouter';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useToast } from '@/hooks/use-toast';\nimport { UserCircle, Package, Heart, Clock, Settings, LogOut } from 'lucide-react';\n\nexport default function Profile() {\n  const [_, navigate] = useLocation();\n  const { user, logout, isAuthenticated, loading } = useAuth();\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  \n  // Handle logout\n  const handleLogout = () => {\n    logout();\n    navigate('/login');\n  };\n  \n  // Handle profile save\n  const handleSaveProfile = () => {\n    setIsEditing(false);\n    toast({\n      title: \"Profile Updated\",\n      description: \"Your profile information has been updated successfully.\",\n    });\n  };\n  \n  // Redirect to login if not authenticated\n  if (!loading && !isAuthenticated) {\n    navigate('/login');\n    return null;\n  }\n  \n  if (loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-10\">\n        <div className=\"max-w-5xl mx-auto\">\n          <div className=\"flex flex-col md:flex-row gap-8\">\n            <div className=\"md:w-64 space-y-4\">\n              <Skeleton className=\"h-10 w-full\" />\n              <Skeleton className=\"h-[300px] w-full\" />\n            </div>\n            <div className=\"flex-1 space-y-8\">\n              <Skeleton className=\"h-10 w-[200px]\" />\n              <Skeleton className=\"h-[200px] w-full\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <>\n      <Helmet>\n        <title>My Profile | 3D Print Wonders</title>\n        <meta name=\"description\" content=\"Manage your account, view orders, and track your 3D Print Wonders purchases.\" />\n      </Helmet>\n      \n      <div className=\"container mx-auto px-4 py-10\">\n        <div className=\"max-w-5xl mx-auto\">\n          <h1 className=\"text-3xl font-bold mb-8\">My Account</h1>\n          \n          <div className=\"flex flex-col md:flex-row gap-8\">\n            {/* Sidebar Navigation */}\n            <div className=\"md:w-64\">\n              <Card>\n                <CardHeader className=\"p-4\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"h-20 w-20 rounded-full bg-primary/10 flex items-center justify-center text-primary mb-3\">\n                      <UserCircle className=\"h-12 w-12\" />\n                    </div>\n                    <CardTitle className=\"text-center\">{user?.username || 'User'}</CardTitle>\n                    <CardDescription className=\"text-center\">\n                      {user?.email || 'user@example.com'}\n                    </CardDescription>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"p-0\">\n                  <Tabs defaultValue=\"profile\" orientation=\"vertical\" className=\"w-full\">\n                    <TabsList className=\"flex flex-col items-stretch h-auto rounded-none border-r bg-card w-full\">\n                      <TabsTrigger \n                        value=\"profile\" \n                        className=\"justify-start px-4 py-3 rounded-none border-l-2 border-transparent data-[state=active]:border-l-primary\" \n                      >\n                        <UserCircle className=\"mr-2 h-4 w-4\" />\n                        Profile\n                      </TabsTrigger>\n                      <TabsTrigger \n                        value=\"orders\" \n                        className=\"justify-start px-4 py-3 rounded-none border-l-2 border-transparent data-[state=active]:border-l-primary\"\n                      >\n                        <Package className=\"mr-2 h-4 w-4\" />\n                        Orders\n                      </TabsTrigger>\n                      <TabsTrigger \n                        value=\"wishlist\" \n                        className=\"justify-start px-4 py-3 rounded-none border-l-2 border-transparent data-[state=active]:border-l-primary\"\n                      >\n                        <Heart className=\"mr-2 h-4 w-4\" />\n                        Wishlist\n                      </TabsTrigger>\n                      <TabsTrigger \n                        value=\"settings\" \n                        className=\"justify-start px-4 py-3 rounded-none border-l-2 border-transparent data-[state=active]:border-l-primary\"\n                      >\n                        <Settings className=\"mr-2 h-4 w-4\" />\n                        Settings\n                      </TabsTrigger>\n                    </TabsList>\n                  </Tabs>\n                  \n                  <div className=\"p-4\">\n                    <Button \n                      variant=\"destructive\" \n                      className=\"w-full\" \n                      onClick={handleLogout}\n                    >\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      Log Out\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Main Content */}\n            <div className=\"flex-1\">\n              <Tabs defaultValue=\"profile\">\n                {/* Profile Tab */}\n                <TabsContent value=\"profile\" className=\"m-0\">\n                  <Card>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <CardTitle>Profile Information</CardTitle>\n                          <CardDescription>\n                            Manage your personal information and address\n                          </CardDescription>\n                        </div>\n                        <Button \n                          variant={isEditing ? \"outline\" : \"default\"}\n                          onClick={() => setIsEditing(!isEditing)}\n                        >\n                          {isEditing ? \"Cancel\" : \"Edit Profile\"}\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    \n                    <CardContent>\n                      <div className=\"space-y-6\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"firstName\">First Name</Label>\n                            <Input \n                              id=\"firstName\" \n                              defaultValue={user?.firstName || ''} \n                              readOnly={!isEditing}\n                              className={!isEditing ? 'bg-muted' : ''}\n                            />\n                          </div>\n                          \n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"lastName\">Last Name</Label>\n                            <Input \n                              id=\"lastName\" \n                              defaultValue={user?.lastName || ''} \n                              readOnly={!isEditing}\n                              className={!isEditing ? 'bg-muted' : ''}\n                            />\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"email\">Email Address</Label>\n                          <Input \n                            id=\"email\" \n                            defaultValue={user?.email || ''} \n                            readOnly={!isEditing}\n                            className={!isEditing ? 'bg-muted' : ''}\n                          />\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"phone\">Phone Number</Label>\n                          <Input \n                            id=\"phone\" \n                            defaultValue={user?.phone || ''} \n                            readOnly={!isEditing}\n                            className={!isEditing ? 'bg-muted' : ''}\n                          />\n                        </div>\n                        \n                        <Separator />\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"address\">Address</Label>\n                          <Input \n                            id=\"address\" \n                            defaultValue={user?.address || ''} \n                            readOnly={!isEditing}\n                            className={!isEditing ? 'bg-muted' : ''}\n                          />\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"city\">City</Label>\n                            <Input \n                              id=\"city\" \n                              defaultValue={user?.city || ''} \n                              readOnly={!isEditing}\n                              className={!isEditing ? 'bg-muted' : ''}\n                            />\n                          </div>\n                          \n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"state\">State</Label>\n                            <Input \n                              id=\"state\" \n                              defaultValue={user?.state || ''} \n                              readOnly={!isEditing}\n                              className={!isEditing ? 'bg-muted' : ''}\n                            />\n                          </div>\n                          \n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"zipCode\">ZIP Code</Label>\n                            <Input \n                              id=\"zipCode\" \n                              defaultValue={user?.zipCode || ''} \n                              readOnly={!isEditing}\n                              className={!isEditing ? 'bg-muted' : ''}\n                            />\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"country\">Country</Label>\n                          <Input \n                            id=\"country\" \n                            defaultValue={user?.country || ''} \n                            readOnly={!isEditing}\n                            className={!isEditing ? 'bg-muted' : ''}\n                          />\n                        </div>\n                        \n                        {isEditing && (\n                          <div className=\"flex justify-end\">\n                            <Button onClick={handleSaveProfile}>\n                              Save Changes\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n                \n                {/* Orders Tab */}\n                <TabsContent value=\"orders\" className=\"m-0\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Order History</CardTitle>\n                      <CardDescription>\n                        View and track your recent orders\n                      </CardDescription>\n                    </CardHeader>\n                    \n                    <CardContent>\n                      <div className=\"text-center py-10\">\n                        <Clock className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                        <h3 className=\"text-lg font-medium mb-2\">No Orders Yet</h3>\n                        <p className=\"text-muted-foreground mb-6\">\n                          You haven't placed any orders yet. Browse our products to get started!\n                        </p>\n                        <Button asChild>\n                          <a href=\"/products\">Shop Now</a>\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n                \n                {/* Wishlist Tab */}\n                <TabsContent value=\"wishlist\" className=\"m-0\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>My Wishlist</CardTitle>\n                      <CardDescription>\n                        Products you've saved for later\n                      </CardDescription>\n                    </CardHeader>\n                    \n                    <CardContent>\n                      <div className=\"text-center py-10\">\n                        <Heart className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                        <h3 className=\"text-lg font-medium mb-2\">Your Wishlist is Empty</h3>\n                        <p className=\"text-muted-foreground mb-6\">\n                          You haven't added any products to your wishlist yet. Click the heart icon on products you love!\n                        </p>\n                        <Button asChild>\n                          <a href=\"/products\">Explore Products</a>\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n                \n                {/* Settings Tab */}\n                <TabsContent value=\"settings\" className=\"m-0\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Account Settings</CardTitle>\n                      <CardDescription>\n                        Manage your account preferences and security\n                      </CardDescription>\n                    </CardHeader>\n                    \n                    <CardContent>\n                      <div className=\"space-y-6\">\n                        <div className=\"space-y-2\">\n                          <h3 className=\"text-lg font-medium\">Password</h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Change your account password\n                          </p>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-2\">\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"currentPassword\">Current Password</Label>\n                              <Input id=\"currentPassword\" type=\"password\" />\n                            </div>\n                            \n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"newPassword\">New Password</Label>\n                              <Input id=\"newPassword\" type=\"password\" />\n                            </div>\n                          </div>\n                          <div className=\"mt-4\">\n                            <Button>Update Password</Button>\n                          </div>\n                        </div>\n                        \n                        <Separator />\n                        \n                        <div className=\"space-y-2\">\n                          <h3 className=\"text-lg font-medium\">Email Preferences</h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Manage your email notifications\n                          </p>\n                          <div className=\"mt-2\">\n                            <div className=\"flex items-center space-x-2\">\n                              <input \n                                type=\"checkbox\" \n                                id=\"marketing-emails\" \n                                className=\"rounded text-primary focus:ring-primary\"\n                                defaultChecked\n                              />\n                              <Label htmlFor=\"marketing-emails\" className=\"text-sm font-normal\">\n                                Receive marketing emails and special offers\n                              </Label>\n                            </div>\n                            \n                            <div className=\"flex items-center space-x-2 mt-2\">\n                              <input \n                                type=\"checkbox\" \n                                id=\"order-updates\" \n                                className=\"rounded text-primary focus:ring-primary\"\n                                defaultChecked\n                              />\n                              <Label htmlFor=\"order-updates\" className=\"text-sm font-normal\">\n                                Receive order status updates\n                              </Label>\n                            </div>\n                          </div>\n                          <div className=\"mt-4\">\n                            <Button>Save Preferences</Button>\n                          </div>\n                        </div>\n                        \n                        <Separator />\n                        \n                        <div className=\"space-y-2\">\n                          <h3 className=\"text-lg font-medium text-destructive\">Danger Zone</h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Permanently delete your account and all data\n                          </p>\n                          <div className=\"mt-2\">\n                            <Button variant=\"destructive\">Delete Account</Button>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":18239},"client/src/pages/Register.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Helmet } from 'react-helmet';\nimport { useAuth } from '@/context/AuthContext';\nimport { z } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { \n  Form, \n  FormControl, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2 } from 'lucide-react';\n\n// Register form schema\nconst registerSchema = z.object({\n  username: z.string()\n    .min(3, 'Username must be at least 3 characters')\n    .max(20, 'Username must be less than 20 characters'),\n  email: z.string()\n    .email('Please enter a valid email address'),\n  password: z.string()\n    .min(6, 'Password must be at least 6 characters'),\n  confirmPassword: z.string(),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterFormValues = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const [location, navigate] = useLocation();\n  const { register, isAuthenticated } = useAuth();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    navigate('/');\n    return null;\n  }\n\n  // Form definition\n  const form = useForm<RegisterFormValues>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      firstName: '',\n      lastName: '',\n    },\n  });\n\n  // Handle form submission\n  const onSubmit = async (data: RegisterFormValues) => {\n    setIsSubmitting(true);\n    try {\n      const success = await register({\n        username: data.username,\n        email: data.email,\n        password: data.password,\n        firstName: data.firstName || undefined,\n        lastName: data.lastName || undefined,\n      });\n\n      if (success) {\n        // Redirect after successful registration\n        navigate('/');\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Create Account | 3D Print Wonders</title>\n        <meta name=\"description\" content=\"Create your 3D Print Wonders account to start shopping for innovative 3D-printed products.\" />\n      </Helmet>\n\n      <div className=\"container max-w-md mx-auto px-4 py-16\">\n        <Card className=\"border shadow-sm\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-bold text-center\">Create Account</CardTitle>\n            <CardDescription className=\"text-center\">\n              Enter your details below to create your account\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"johndoe\" \n                          {...field} \n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"email@example.com\" \n                          {...field} \n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name (Optional)</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"John\" \n                            {...field} \n                            disabled={isSubmitting}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name (Optional)</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Doe\" \n                            {...field} \n                            disabled={isSubmitting}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\" \n                          placeholder=\"••••••••\" \n                          {...field} \n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\" \n                          placeholder=\"••••••••\" \n                          {...field} \n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isSubmitting}\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> \n                      Creating Account...\n                    </>\n                  ) : (\n                    \"Create Account\"\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-4 relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <Separator className=\"w-full\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-card px-2 text-muted-foreground\">\n                  Or continue with\n                </span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4 mt-4\">\n              <Button variant=\"outline\" type=\"button\" disabled={isSubmitting}>\n                <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n                  <path\n                    d=\"M12.0003 4.75C13.7703 4.75 15.3553 5.36002 16.6053 6.54998L20.0303 3.125C17.9502 1.19 15.2353 0 12.0003 0C7.31028 0 3.25526 2.69 1.28027 6.60998L5.27028 9.70498C6.21525 6.86002 8.87028 4.75 12.0003 4.75Z\"\n                    fill=\"#EA4335\"\n                  />\n                  <path\n                    d=\"M23.49 12.275C23.49 11.49 23.415 10.73 23.3 10H12V14.51H18.47C18.18 15.99 17.34 17.25 16.08 18.08L19.945 21.06C22.2 19.01 23.49 15.92 23.49 12.275Z\"\n                    fill=\"#4285F4\"\n                  />\n                  <path\n                    d=\"M5.26498 14.2949C5.02498 13.5699 4.88501 12.7999 4.88501 11.9999C4.88501 11.1999 5.01998 10.4299 5.26498 9.7049L1.275 6.60986C0.46 8.22986 0 10.0599 0 11.9999C0 13.9399 0.46 15.7699 1.28 17.3899L5.26498 14.2949Z\"\n                    fill=\"#FBBC05\"\n                  />\n                  <path\n                    d=\"M12.0004 24.0001C15.2404 24.0001 17.9654 22.935 19.9454 21.06L16.0804 18.08C15.0454 18.77 13.6954 19.2001 12.0004 19.2001C8.8704 19.2001 6.21537 17.09 5.2654 14.295L1.27539 17.39C3.25537 21.31 7.3104 24.0001 12.0004 24.0001Z\"\n                    fill=\"#34A853\"\n                  />\n                </svg>\n                Google\n              </Button>\n\n              <Button variant=\"outline\" type=\"button\" disabled={isSubmitting}>\n                <svg viewBox=\"0 0 24 24\" className=\"mr-2 h-4 w-4 fill-current\">\n                  <path d=\"M16.365 1.43c0 1.14-.788 2.165-1.854 2.717.466 1.46 1.334 2.731 2.415 3.572.304-.14.688-.225 1.141-.225a4.18 4.18 0 0 1 1.343.224 8.337 8.337 0 0 1-1.76 3.826 6.413 6.413 0 0 1-1.856 1.562 10.161 10.161 0 0 1-2.732.799c-2.285.333-4.658-.254-6.53-1.644-1.73-1.29-2.876-3.18-3.261-5.288a6.783 6.783 0 0 1-.143-1.403A6.642 6.642 0 0 1 3.995 2.45c.493-.59 1.146-.902 1.852-.865.653.036 1.329.377 1.957.88h.01l.138.135a1.4 1.4 0 0 0 1.25.547 1.398 1.398 0 0 0 1.25-.546l.137-.136a4.63 4.63 0 0 1 1.096-.61 4.108 4.108 0 0 1 1.035-.26c.661-.077 1.29.011 1.801.261.661.324 1.108.836 1.253 1.481.145.645-.05 1.365-.536 2.094Zm-7.25 8.955a7.025 7.025 0 0 0-1.2-1.148 6.967 6.967 0 0 0-1.547-.75 7.027 7.027 0 0 0-1.158-.224 4.283 4.283 0 0 0-.363-.012c-.628 0-1.011.149-1.163.257a.389.389 0 0 0-.146.23.367.367 0 0 0 .12.33l.038.03c.051.04.133.094.248.147.32.147.842.323 1.588.323a5.548 5.548 0 0 0 1.692-.268 4.625 4.625 0 0 0 1.109-.54 4.841 4.841 0 0 0 .953-.83c-.08-.05-.163-.099-.247-.146a6.308 6.308 0 0 0-.924-.4Z\" />\n                </svg>\n                Apple\n              </Button>\n            </div>\n          </CardContent>\n\n          <CardFooter className=\"flex justify-center\">\n            <p className=\"text-center text-sm text-muted-foreground\">\n              Already have an account?{' '}\n              <Link href=\"/login\">\n                <a className=\"text-primary hover:underline\">\n                  Sign in\n                </a>\n              </Link>\n            </p>\n          </CardFooter>\n        </Card>\n      </div>\n    </>\n  );\n}","size_bytes":11384},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/cart/CartItem.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { useCart } from '@/context/CartContext';\n// Import types until shared schema is properly connected\ninterface Product {\n  id: number;\n  name: string;\n  slug: string;\n  description?: string;\n  price: number;\n  imageUrl?: string;\n  category?: string;\n  rating?: number;\n  reviewCount?: number;\n  featured?: boolean;\n  inStock?: boolean;\n}\n\ninterface CartItemType {\n  id: number;\n  userId: number;\n  productId: number;\n  quantity: number;\n  customizations?: Record<string, any>;\n}\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card } from '@/components/ui/card';\nimport { \n  Trash, \n  MinusCircle, \n  PlusCircle, \n  AlertCircle,\n  Loader2\n} from 'lucide-react';\nimport { useCurrency } from '@/context/CurrencyContext';\n\ninterface CartItemProps {\n  item: CartItemType & { product?: Product };\n}\n\nexport default function CartItem({ item }: CartItemProps) {\n  const { updateItem, removeItem } = useCart();\n  const { formatPrice } = useCurrency();\n  const [quantity, setQuantity] = useState(item.quantity);\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [isRemoving, setIsRemoving] = useState(false);\n\n  // If product is missing\n  if (!item.product) {\n    return (\n      <Card className=\"p-4 border\">\n        <div className=\"flex items-center space-x-2 text-destructive\">\n          <AlertCircle className=\"h-5 w-5\" />\n          <p>Product not available</p>\n        </div>\n      </Card>\n    );\n  }\n\n  // Handle quantity change with debounce\n  const handleQuantityChange = (value: number) => {\n    if (value < 1) value = 1;\n    if (value > 10) value = 10;\n    \n    setQuantity(value);\n    \n    setIsUpdating(true);\n    updateItem(item.id, value).finally(() => {\n      setIsUpdating(false);\n    });\n  };\n\n  // Handle item removal\n  const handleRemove = () => {\n    setIsRemoving(true);\n    removeItem(item.id).finally(() => {\n      setIsRemoving(false);\n    });\n  };\n\n  return (\n    <div className=\"flex flex-col sm:flex-row gap-4 pb-6 border-b last:border-0 last:pb-0\">\n      {/* Product Image */}\n      <div className=\"sm:w-24 h-24 bg-muted rounded-md overflow-hidden\">\n        <Link href={`/products/${item.product.slug}`}>\n          {item.product.imageUrl ? (\n            <img \n              src={item.product.imageUrl} \n              alt={item.product.name} \n              className=\"w-full h-full object-cover\"\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center text-muted-foreground\">\n              No Image\n            </div>\n          )}\n        </Link>\n      </div>\n      \n      {/* Product Details */}\n      <div className=\"flex-1\">\n        <div className=\"flex justify-between flex-wrap mb-1\">\n          <Link href={`/products/${item.product.slug}`}>\n            <h3 className=\"font-medium text-lg hover:underline\">\n              {item.product.name}\n            </h3>\n          </Link>\n          <div className=\"font-semibold\">\n            {formatPrice(item.product.price * quantity)}\n          </div>\n        </div>\n        \n        <p className=\"text-sm text-muted-foreground mb-3\">\n          {item.product.description?.substring(0, 120)}\n          {item.product.description && item.product.description.length > 120 ? '...' : ''}\n        </p>\n        \n        {/* Display customization details if any */}\n        {item.customizations && Object.keys(item.customizations).length > 0 && (\n          <div className=\"bg-muted/50 rounded-md p-2 mb-3\">\n            <p className=\"text-xs font-medium mb-1\">Customizations:</p>\n            <div className=\"text-xs text-muted-foreground\">\n              {Object.entries(item.customizations).map(([key, value]) => (\n                <span key={key} className=\"inline-block mr-3\">\n                  <span className=\"font-medium capitalize\">{key}:</span> {value}\n                </span>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        {/* Quantity Controls */}\n        <div className=\"flex items-center space-x-2 sm:space-x-4\">\n          <div className=\"flex items-center\">\n            <button\n              onClick={() => handleQuantityChange(quantity - 1)}\n              disabled={quantity <= 1 || isUpdating}\n              className=\"p-1 disabled:opacity-50\"\n              aria-label=\"Decrease quantity\"\n            >\n              <MinusCircle className=\"h-5 w-5\" />\n            </button>\n            \n            <Input\n              type=\"number\"\n              min=\"1\"\n              max=\"10\"\n              value={quantity}\n              onChange={(e) => handleQuantityChange(parseInt(e.target.value) || 1)}\n              className=\"w-14 text-center mx-2\"\n              disabled={isUpdating}\n            />\n            \n            <button\n              onClick={() => handleQuantityChange(quantity + 1)}\n              disabled={quantity >= 10 || isUpdating}\n              className=\"p-1 disabled:opacity-50\"\n              aria-label=\"Increase quantity\"\n            >\n              <PlusCircle className=\"h-5 w-5\" />\n            </button>\n          </div>\n          \n          <div className=\"relative\">\n            {isUpdating && (\n              <div className=\"absolute inset-0 flex items-center justify-center bg-background/80 rounded-md\">\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              </div>\n            )}\n            <p className=\"text-sm text-muted-foreground\">\n              {formatPrice(item.product.price)} each\n            </p>\n          </div>\n          \n          <div className=\"ml-auto\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-destructive hover:text-destructive hover:bg-destructive/10\"\n              onClick={handleRemove}\n              disabled={isRemoving}\n              aria-label=\"Remove item\"\n            >\n              {isRemoving ? (\n                <Loader2 className=\"h-5 w-5 animate-spin\" />\n              ) : (\n                <Trash className=\"h-5 w-5\" />\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6161},"client/src/components/cart/CartSummary.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { Card, CardContent, CardFooter } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { Loader2 } from 'lucide-react';\n// Define types locally until schema is properly connected\ninterface Product {\n  id: number;\n  name: string;\n  slug: string;\n  description?: string;\n  price: number;\n  imageUrl?: string;\n  category?: string;\n  rating?: number;\n  reviewCount?: number;\n  featured?: boolean;\n  inStock?: boolean;\n}\n\ninterface CartItem {\n  id: number;\n  userId: number;\n  productId: number;\n  quantity: number;\n  customizations?: Record<string, any>;\n}\nimport { useCurrency } from '@/context/CurrencyContext';\n\ninterface CartSummaryProps {\n  items: (CartItem & { product?: Product })[];\n}\n\nexport default function CartSummary({ items }: CartSummaryProps) {\n  const { formatPrice } = useCurrency();\n  const [subtotal, setSubtotal] = useState(0);\n  const [shippingCost, setShippingCost] = useState(0);\n  const [taxRate, setTaxRate] = useState(0.08); // 8% tax rate\n  const [calculating, setCalculating] = useState(true);\n\n  useEffect(() => {\n    // Simulate calculation delay\n    setCalculating(true);\n    const timer = setTimeout(() => {\n      calculateTotals();\n      setCalculating(false);\n    }, 500);\n    \n    return () => clearTimeout(timer);\n  }, [items]);\n\n  const calculateTotals = () => {\n    // Calculate subtotal\n    const newSubtotal = items.reduce((sum, item) => {\n      const price = item.product?.price || 0;\n      return sum + (price * item.quantity);\n    }, 0);\n    \n    setSubtotal(newSubtotal);\n    \n    // Determine shipping cost - free over $75, otherwise $8.99\n    setShippingCost(newSubtotal >= 75 ? 0 : 8.99);\n  };\n\n  const tax = subtotal * taxRate;\n  const total = subtotal + shippingCost + tax;\n\n  return (\n    <Card className=\"border shadow-sm\">\n      <CardContent className=\"p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">Order Summary</h2>\n        \n        {calculating ? (\n          <div className=\"flex justify-center py-6\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n          </div>\n        ) : (\n          <>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Subtotal ({items.length} items)</span>\n                <span>{formatPrice(subtotal)}</span>\n              </div>\n              \n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Shipping</span>\n                {shippingCost === 0 ? (\n                  <span className=\"text-green-600 dark:text-green-500\">Free</span>\n                ) : (\n                  <span>{formatPrice(shippingCost)}</span>\n                )}\n              </div>\n              \n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Tax (8%)</span>\n                <span>{formatPrice(tax)}</span>\n              </div>\n              \n              {shippingCost > 0 && (\n                <div className=\"text-sm text-muted-foreground bg-muted/60 p-2 rounded-md\">\n                  Add <strong>{formatPrice(75 - subtotal)}</strong> more to qualify for free shipping\n                </div>\n              )}\n            </div>\n            \n            <Separator className=\"my-4\" />\n            \n            <div className=\"flex justify-between items-center font-semibold text-lg\">\n              <span>Total</span>\n              <span>{formatPrice(total)}</span>\n            </div>\n            \n            <div className=\"mt-4 text-sm text-muted-foreground\">\n              * Shipping times may vary based on your location. Standard delivery is usually 5-7 business days.\n            </div>\n          </>\n        )}\n      </CardContent>\n      \n      <CardFooter className=\"p-6 pt-0 bg-muted/20\">\n        <div className=\"w-full flex flex-col space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm\">Payment Methods</span>\n            <div className=\"flex space-x-1\">\n              {/* Payment Icons */}\n              <div className=\"w-8 h-5 bg-[#1434CB] rounded\"></div>\n              <div className=\"w-8 h-5 bg-[#FF5F00] rounded\"></div>\n              <div className=\"w-8 h-5 bg-[#6772E5] rounded\"></div>\n              <div className=\"w-8 h-5 bg-[#2790C3] rounded\"></div>\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":4524},"client/src/components/currency/CurrencySelector.tsx":{"content":"import { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { useCurrency } from \"@/context/CurrencyContext\";\n\nexport default function CurrencySelector() {\n  const { \n    currency, \n    setCurrency, \n    availableCurrencies \n  } = useCurrency();\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Select\n        value={currency}\n        onValueChange={(value) => setCurrency(value as any)}\n      >\n        <SelectTrigger className=\"w-[110px] h-9\">\n          <SelectValue placeholder=\"Select Currency\" />\n        </SelectTrigger>\n        <SelectContent>\n          {availableCurrencies.map((curr) => (\n            <SelectItem key={curr.code} value={curr.code}>\n              <div className=\"flex items-center\">\n                <span className=\"mr-2\">{curr.symbol}</span>\n                <span>{curr.code}</span>\n              </div>\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}","size_bytes":1014},"client/src/components/customize/CustomizerControls.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Slider } from '@/components/ui/slider';\nimport { Badge } from '@/components/ui/badge';\nimport { Palette, Scale, Type } from 'lucide-react';\n\ninterface Model {\n  id: string;\n  name: string;\n  model: string;\n  price: number;\n}\n\ninterface CustomizationOptions {\n  model: string;\n  material: string;\n  color: string;\n  scale: number;\n  text: string;\n}\n\ninterface CustomizerControlsProps {\n  customization: CustomizationOptions;\n  models: Model[];\n  onCustomizationChange: (key: keyof CustomizationOptions, value: any) => void;\n  onModelChange: (modelId: string) => void;\n}\n\nexport default function CustomizerControls({\n  customization,\n  models,\n  onCustomizationChange,\n  onModelChange\n}: CustomizerControlsProps) {\n  const [activeModelId, setActiveModelId] = useState<string>(\n    models.find(m => m.model === customization.model)?.id || models[0].id\n  );\n\n  const handleModelSelect = (id: string) => {\n    setActiveModelId(id);\n    onModelChange(id);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-medium mb-4\">Select Base Model</h3>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3\">\n            {models.map((model) => (\n              <div \n                key={model.id}\n                className={`border rounded-lg p-4 cursor-pointer transition-all duration-200 ${\n                  activeModelId === model.id \n                    ? 'border-primary bg-primary/10' \n                    : 'hover:border-muted-foreground'\n                }`}\n                onClick={() => handleModelSelect(model.id)}\n              >\n                <div className=\"aspect-square bg-muted rounded-md mb-3 flex items-center justify-center text-muted-foreground text-sm\">\n                  Model Preview\n                </div>\n                <p className=\"font-medium\">{model.name}</p>\n                <div className=\"flex justify-between items-center mt-1\">\n                  <Badge variant=\"outline\">${model.price.toFixed(2)}</Badge>\n                  {activeModelId === model.id && (\n                    <Badge variant=\"secondary\">Selected</Badge>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardContent className=\"p-6 space-y-6\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Palette className=\"h-5 w-5 text-primary\" />\n            <h3 className=\"text-lg font-medium\">Material & Color</h3>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"material\">Material</Label>\n              <select \n                id=\"material\" \n                className=\"w-full rounded-md border border-input bg-transparent p-2\"\n                value={customization.material}\n                onChange={(e) => onCustomizationChange('material', e.target.value)}\n              >\n                <option value=\"PLA\">PLA Standard (Lightweight)</option>\n                <option value=\"ABS\">ABS (Durable)</option>\n                <option value=\"PETG\">PETG (Flexible)</option>\n                <option value=\"Resin\">High-Detail Resin</option>\n              </select>\n              <p className=\"text-xs text-muted-foreground\">\n                {customization.material === 'PLA' && 'Economical and environmentally friendly. Good for decorative items.'}\n                {customization.material === 'ABS' && 'Durable and impact-resistant. Great for functional parts.'}\n                {customization.material === 'PETG' && 'Flexible with good chemical resistance. Ideal for mechanical parts.'}\n                {customization.material === 'Resin' && 'Premium material with fine details. Best for intricate designs.'}\n              </p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"color\">Color</Label>\n              <div className=\"grid grid-cols-6 gap-2 mb-2\">\n                {['#6D28D9', '#EA580C', '#16A34A', '#0891B2', '#000000', '#FFFFFF'].map((color) => (\n                  <div \n                    key={color}\n                    className={`h-8 rounded-md cursor-pointer border-2 ${\n                      customization.color === color ? 'border-ring' : 'border-transparent'\n                    }`}\n                    style={{ backgroundColor: color }}\n                    onClick={() => onCustomizationChange('color', color)}\n                  />\n                ))}\n              </div>\n              <Input \n                id=\"color\" \n                type=\"color\" \n                value={customization.color}\n                onChange={(e) => onCustomizationChange('color', e.target.value)}\n              />\n            </div>\n          </div>\n          \n          <Separator />\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Scale className=\"h-5 w-5 text-primary\" />\n              <h3 className=\"text-lg font-medium\">Scale</h3>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <Label htmlFor=\"scale\">Size Adjustment</Label>\n                <span className=\"text-sm font-medium\">{customization.scale}x</span>\n              </div>\n              <Slider \n                id=\"scale\"\n                min={0.5}\n                max={2}\n                step={0.1}\n                value={[customization.scale]}\n                onValueChange={(value) => onCustomizationChange('scale', value[0])}\n                className=\"py-4\"\n              />\n              <div className=\"flex justify-between text-xs text-muted-foreground\">\n                <span>Smaller (0.5x)</span>\n                <span>Original (1x)</span>\n                <span>Larger (2x)</span>\n              </div>\n            </div>\n          </div>\n          \n          <Separator />\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Type className=\"h-5 w-5 text-primary\" />\n              <h3 className=\"text-lg font-medium\">Customization</h3>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"text\">Text Engraving (Optional)</Label>\n              <Input \n                id=\"text\" \n                placeholder=\"Enter text to engrave...\"\n                value={customization.text}\n                onChange={(e) => onCustomizationChange('text', e.target.value)}\n                maxLength={30}\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Maximum 30 characters. Adds $5 to the total price.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7179},"client/src/components/home/Categories.tsx":{"content":"import { Link } from 'wouter';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\n\nconst categories = [\n  {\n    id: 1,\n    name: 'Gadgets',\n    slug: 'gadgets',\n    description: 'Tech accessories and smart device add-ons',\n    imageUrl: 'https://placehold.co/300x200/2563EB/FFFFFF?text=Gadgets',\n    count: 24\n  },\n  {\n    id: 2,\n    name: 'Home Decor',\n    slug: 'home-decor',\n    description: 'Decorative pieces and functional art',\n    imageUrl: 'https://placehold.co/300x200/10B981/FFFFFF?text=Home+Decor',\n    count: 31\n  },\n  {\n    id: 3,\n    name: 'Toys & Games',\n    slug: 'toys-games',\n    description: 'Figurines, puzzles, and interactive toys',\n    imageUrl: 'https://placehold.co/300x200/F59E0B/FFFFFF?text=Toys',\n    count: 19\n  },\n  {\n    id: 4,\n    name: 'Educational',\n    slug: 'educational',\n    description: 'Learning tools and educational models',\n    imageUrl: 'https://placehold.co/300x200/EC4899/FFFFFF?text=Educational',\n    count: 15\n  }\n];\n\nexport default function Categories() {\n  return (\n    <section className=\"py-16 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold tracking-tight\">Browse Categories</h2>\n          <p className=\"text-muted-foreground mt-4 max-w-2xl mx-auto\">\n            Explore our diverse range of 3D printed products organized into categories to help you find exactly what you're looking for.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {categories.map((category) => (\n            <Link key={category.id} href={`/products?category=${category.slug}`}>\n              <Card className=\"overflow-hidden h-full transition-all duration-200 hover:shadow-md cursor-pointer\">\n                <div className=\"aspect-[3/2] relative overflow-hidden\">\n                  <div \n                    className=\"w-full h-full bg-cover bg-center\"\n                    style={{ \n                      backgroundImage: `url(${category.imageUrl})`,\n                      backgroundSize: 'cover'\n                    }}\n                  />\n                </div>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <h3 className=\"font-medium text-lg\">{category.name}</h3>\n                    <Badge variant=\"outline\">{category.count}</Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{category.description}</p>\n                </CardContent>\n              </Card>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":2738},"client/src/components/home/FeaturedProducts.tsx":{"content":"import { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardFooter } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowRight, Eye, ShoppingCart, Star } from 'lucide-react';\n\nconst featuredProducts = [\n  {\n    id: 1,\n    name: 'Modular Phone Stand',\n    slug: 'modular-phone-stand',\n    price: 24.99,\n    imageUrl: 'https://placehold.co/300x300/2563EB/FFFFFF?text=Phone+Stand',\n    rating: 4.8,\n    reviewCount: 32,\n    category: 'gadgets',\n    featured: true,\n    inStock: true\n  },\n  {\n    id: 2,\n    name: 'Geometric Desk Organizer',\n    slug: 'geometric-desk-organizer',\n    price: 34.99,\n    imageUrl: 'https://placehold.co/300x300/10B981/FFFFFF?text=Desk+Organizer',\n    rating: 4.6,\n    reviewCount: 28,\n    category: 'home-decor',\n    featured: true,\n    inStock: true\n  },\n  {\n    id: 3,\n    name: 'Articulated Dragon Figure',\n    slug: 'articulated-dragon-figure',\n    price: 29.99,\n    imageUrl: 'https://placehold.co/300x300/F59E0B/FFFFFF?text=Dragon+Figure',\n    rating: 4.9,\n    reviewCount: 47,\n    category: 'toys-games',\n    featured: true,\n    inStock: true\n  },\n  {\n    id: 4,\n    name: 'Customizable Planter',\n    slug: 'customizable-planter',\n    price: 19.99,\n    imageUrl: 'https://placehold.co/300x300/EC4899/FFFFFF?text=Planter',\n    rating: 4.5,\n    reviewCount: 23,\n    category: 'home-decor',\n    featured: true,\n    inStock: true\n  }\n];\n\nexport default function FeaturedProducts() {\n  return (\n    <section className=\"py-16 bg-background-muted\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex justify-between items-end mb-12\">\n          <div>\n            <h2 className=\"text-3xl font-bold tracking-tight\">Featured Products</h2>\n            <p className=\"text-muted-foreground mt-4 max-w-2xl\">\n              Our most popular and trending 3D printed creations that customers love.\n            </p>\n          </div>\n          <Button variant=\"outline\" asChild>\n            <Link href=\"/products\">\n              View All <ArrowRight className=\"ml-2 h-4 w-4\" />\n            </Link>\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {featuredProducts.map((product) => (\n            <Card key={product.id} className=\"overflow-hidden h-full border transition-all duration-200 hover:shadow-md\">\n              <div className=\"relative\">\n                <Link href={`/products/${product.slug}`}>\n                  <div className=\"aspect-square relative overflow-hidden group\">\n                    <div \n                      className=\"w-full h-full bg-cover bg-center transition-transform duration-300 group-hover:scale-105\"\n                      style={{ \n                        backgroundImage: `url(${product.imageUrl})`,\n                        backgroundSize: 'cover'\n                      }}\n                    />\n                    <div className=\"absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                      <Button variant=\"secondary\" size=\"sm\" className=\"mx-1\">\n                        <Eye className=\"h-4 w-4 mr-2\" /> Quick View\n                      </Button>\n                    </div>\n                  </div>\n                </Link>\n                {product.featured && (\n                  <Badge className=\"absolute top-3 left-3 bg-primary text-primary-foreground\">\n                    Featured\n                  </Badge>\n                )}\n              </div>\n              \n              <CardContent className=\"p-4\">\n                <div className=\"flex justify-between mb-2\">\n                  <Link href={`/products?category=${product.category}`}>\n                    <Badge variant=\"outline\" className=\"capitalize\">\n                      {product.category.replace('-', ' ')}\n                    </Badge>\n                  </Link>\n                  <div className=\"flex items-center text-amber-500\">\n                    <Star className=\"fill-current h-4 w-4 mr-1\" />\n                    <span className=\"text-sm font-medium\">{product.rating}</span>\n                    <span className=\"text-xs text-muted-foreground ml-1\">({product.reviewCount})</span>\n                  </div>\n                </div>\n                <Link href={`/products/${product.slug}`}>\n                  <h3 className=\"font-medium text-lg hover:underline line-clamp-1\">{product.name}</h3>\n                </Link>\n                <p className=\"text-primary font-semibold mt-1\">${product.price.toFixed(2)}</p>\n              </CardContent>\n              \n              <CardFooter className=\"p-4 pt-0 flex gap-2\">\n                <Button variant=\"default\" className=\"w-full\" asChild>\n                  <Link href={`/products/${product.slug}`}>\n                    <ShoppingCart className=\"h-4 w-4 mr-2\" /> Add to Cart\n                  </Link>\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5081},"client/src/components/home/Features.tsx":{"content":"import { \n  Package, \n  Truck, \n  CreditCard, \n  PencilRuler, \n  RotateCcw, \n  ShieldCheck\n} from 'lucide-react';\n\nconst features = [\n  {\n    icon: <Package className=\"h-10 w-10 text-primary\" />,\n    title: '3D Visualization',\n    description: 'Interactive 3D models let you see every detail before purchasing.'\n  },\n  {\n    icon: <PencilRuler className=\"h-10 w-10 text-primary\" />,\n    title: 'Custom Designs',\n    description: 'Personalize products with our easy-to-use customization tools.'\n  },\n  {\n    icon: <Truck className=\"h-10 w-10 text-primary\" />,\n    title: 'Fast Shipping',\n    description: 'Quick production and delivery to your doorstep within days.'\n  },\n  {\n    icon: <ShieldCheck className=\"h-10 w-10 text-primary\" />,\n    title: 'Quality Materials',\n    description: 'Premium, eco-friendly materials for durability and sustainability.'\n  },\n  {\n    icon: <CreditCard className=\"h-10 w-10 text-primary\" />,\n    title: 'Secure Payments',\n    description: 'Shop with confidence using our encrypted payment processing.'\n  },\n  {\n    icon: <RotateCcw className=\"h-10 w-10 text-primary\" />,\n    title: '30-Day Returns',\n    description: 'Not satisfied? Return within 30 days for a full refund.'\n  }\n];\n\nexport default function Features() {\n  return (\n    <section className=\"py-16 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold tracking-tight\">Why Choose Us</h2>\n          <p className=\"text-muted-foreground mt-4 max-w-2xl mx-auto\">\n            We're committed to providing the best 3D printing experience with these key features.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {features.map((feature, index) => (\n            <div key={index} className=\"flex flex-col items-start p-6 bg-card rounded-lg border shadow-sm\">\n              <div className=\"rounded-full p-3 bg-primary/10 mb-4\">\n                {feature.icon}\n              </div>\n              <h3 className=\"text-xl font-medium mb-2\">{feature.title}</h3>\n              <p className=\"text-muted-foreground\">{feature.description}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":2268},"client/src/components/home/Hero.tsx":{"content":"import { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { ArrowRight } from 'lucide-react';\n\nexport default function Hero() {\n  return (\n    <div className=\"relative w-full bg-background pt-10 md:pt-0\">\n      <div className=\"container mx-auto grid md:grid-cols-2 gap-8 items-center py-12 md:py-24\">\n        {/* Left column text content */}\n        <div className=\"space-y-6 text-center md:text-left\">\n          <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight\">\n            <span className=\"text-primary\">3D Printed</span>{\" \"}\n            <span className=\"block\">Wonders for Your World</span>\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-xl mx-auto md:mx-0\">\n            Innovative, customizable 3D printed gadgets, accessories, and models\n            with interactive previews and fast shipping to your doorstep.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center md:justify-start\">\n            <Button size=\"lg\" asChild>\n              <Link href=\"/products\">\n                Shop Now <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Link>\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" asChild>\n              <Link href=\"/customize\">\n                Customize Your Design\n              </Link>\n            </Button>\n          </div>\n          <div className=\"flex items-center gap-6 justify-center md:justify-start text-sm\">\n            <div className=\"flex items-center\">\n              <div className=\"mr-2 h-4 w-4 text-primary\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                  <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\" />\n                  <polyline points=\"22 4 12 14.01 9 11.01\" />\n                </svg>\n              </div>\n              <span>Premium Materials</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"mr-2 h-4 w-4 text-primary\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                  <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\" />\n                  <polyline points=\"22 4 12 14.01 9 11.01\" />\n                </svg>\n              </div>\n              <span>Free Shipping</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"mr-2 h-4 w-4 text-primary\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                  <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\" />\n                  <polyline points=\"22 4 12 14.01 9 11.01\" />\n                </svg>\n              </div>\n              <span>Warranty</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Right column 3D visualization */}\n        <div className=\"relative h-[400px] w-full rounded-xl bg-gradient-to-br from-indigo-50 via-purple-50 to-pink-50 dark:from-indigo-950/30 dark:via-purple-950/30 dark:to-pink-950/30 overflow-hidden shadow-xl\">\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-muted-foreground text-center\">\n              <div className=\"mx-auto mb-4 h-12 w-12 animate-spin rounded-full border-4 border-primary border-t-transparent\"></div>\n              <p>3D Model Viewer</p>\n              <p className=\"text-sm\">(Interactive 3D model would display here)</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Wave divider */}\n      <div className=\"absolute bottom-0 left-0 w-full overflow-hidden\">\n        <svg className=\"relative block w-full h-[50px]\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1200 120\" preserveAspectRatio=\"none\">\n          <path d=\"M985.66,92.83C906.67,72,823.78,31,743.84,14.19c-82.26-17.34-168.06-16.33-250.45.39-57.84,11.73-114,31.07-172,41.86A600.21,600.21,0,0,1,0,27.35V120H1200V95.8C1132.19,118.92,1055.71,111.31,985.66,92.83Z\" className=\"fill-background-muted\"></path>\n        </svg>\n      </div>\n    </div>\n  );\n}","size_bytes":4331},"client/src/components/home/Newsletter.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { MailIcon, ArrowRight } from 'lucide-react';\n\nexport default function Newsletter() {\n  const [email, setEmail] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (email.trim()) {\n      // In a real app, you would send this to your backend\n      console.log('Subscribing email:', email);\n      setSubmitted(true);\n      setEmail('');\n      \n      // Reset the submitted state after 3 seconds\n      setTimeout(() => {\n        setSubmitted(false);\n      }, 3000);\n    }\n  };\n\n  return (\n    <section className=\"py-16 bg-primary text-primary-foreground\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"max-w-3xl mx-auto text-center\">\n          <div className=\"inline-block p-3 bg-primary-foreground/10 rounded-full mb-6\">\n            <MailIcon className=\"h-8 w-8\" />\n          </div>\n          <h2 className=\"text-3xl font-bold tracking-tight mb-4\">\n            Stay Updated on New Designs\n          </h2>\n          <p className=\"text-primary-foreground/90 mb-8 max-w-2xl mx-auto\">\n            Subscribe to our newsletter to receive updates on new product releases, \n            special offers, and exclusive customization tips.\n          </p>\n          \n          <form onSubmit={handleSubmit} className=\"flex flex-col sm:flex-row gap-3 max-w-lg mx-auto\">\n            <div className=\"flex-1\">\n              <Input\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                className=\"bg-primary-foreground/10 border-primary-foreground/20 text-primary-foreground placeholder:text-primary-foreground/60 h-12\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            <Button \n              type=\"submit\" \n              variant=\"secondary\" \n              size=\"lg\"\n              className=\"whitespace-nowrap\"\n              disabled={submitted}\n            >\n              {submitted ? 'Subscribed!' : (\n                <>\n                  Subscribe <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </>\n              )}\n            </Button>\n          </form>\n          \n          <p className=\"mt-4 text-sm text-primary-foreground/70\">\n            We respect your privacy. Unsubscribe at any time.\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":2562},"client/src/components/home/Testimonials.tsx":{"content":"import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Star } from 'lucide-react';\n\nconst testimonials = [\n  {\n    id: 1,\n    name: 'Alex Johnson',\n    avatar: 'AJ',\n    role: 'Product Designer',\n    content: \"The quality of these 3D printed items is outstanding. I've ordered multiple pieces for my workspace and they're both functional and aesthetically pleasing.\",\n    rating: 5\n  },\n  {\n    id: 2,\n    name: 'Sarah Chen',\n    avatar: 'SC',\n    role: 'Tech Enthusiast',\n    content: \"The customization options are incredible! I was able to create a completely personalized phone dock that matches my setup perfectly.\",\n    rating: 5\n  },\n  {\n    id: 3,\n    name: 'Marcus Williams',\n    avatar: 'MW',\n    role: 'Teacher',\n    content: \"I use these 3D models in my classroom to help students visualize complex concepts. The educational collection is a game-changer for hands-on learning.\",\n    rating: 4\n  },\n];\n\nexport default function Testimonials() {\n  return (\n    <section className=\"py-16 bg-background-muted\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold tracking-tight\">What Our Customers Say</h2>\n          <p className=\"text-muted-foreground mt-4 max-w-2xl mx-auto\">\n            Hear from our satisfied customers about their experiences with our 3D printed products.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          {testimonials.map((testimonial) => (\n            <Card key={testimonial.id} className=\"border bg-card\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center mb-4\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <Star\n                      key={i}\n                      className={`h-5 w-5 ${\n                        i < testimonial.rating\n                          ? 'text-amber-500 fill-amber-500'\n                          : 'text-muted-foreground'\n                      }`}\n                    />\n                  ))}\n                </div>\n                <p className=\"mb-6 italic text-muted-foreground\">\"{testimonial.content}\"</p>\n                <div className=\"flex items-center\">\n                  <Avatar className=\"h-10 w-10 mr-3\">\n                    <AvatarImage src={`https://i.pravatar.cc/150?u=${testimonial.id}`} />\n                    <AvatarFallback>{testimonial.avatar}</AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <p className=\"font-medium text-sm\">{testimonial.name}</p>\n                    <p className=\"text-xs text-muted-foreground\">{testimonial.role}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":2925},"client/src/components/layout/Footer.tsx":{"content":"import { Link } from 'wouter';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { Facebook, Instagram, Twitter, Youtube, Github } from 'lucide-react';\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-card text-card-foreground border-t\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-8\">\n          {/* Company Information */}\n          <div className=\"lg:col-span-2\">\n            <Link href=\"/\" className=\"inline-block\">\n              <span className=\"text-2xl font-bold font-['Space_Grotesk'] text-primary\">3D<span className=\"text-orange-500\">Print</span><span className=\"text-teal-500\">Wonders</span></span>\n            </Link>\n            <p className=\"mt-4 text-muted-foreground max-w-md\">\n              Bringing your ideas to life through innovative 3D printing technology. Customize, create, and collect unique 3D-printed products designed for modern living.\n            </p>\n            <div className=\"mt-6 flex space-x-4\">\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                <Facebook className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Facebook</span>\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                <Instagram className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Instagram</span>\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                <Twitter className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Twitter</span>\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                <Youtube className=\"h-5 w-5\" />\n                <span className=\"sr-only\">YouTube</span>\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                <Github className=\"h-5 w-5\" />\n                <span className=\"sr-only\">GitHub</span>\n              </a>\n            </div>\n          </div>\n          \n          {/* Shop Links */}\n          <div>\n            <h3 className=\"text-lg font-medium mb-4\">Shop</h3>\n            <ul className=\"space-y-3\">\n              <li>\n                <Link href=\"/products\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  All Products\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/products?category=tech-accessories\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  Tech Accessories\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/products?category=home-decor\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  Home Decor\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/products?category=collectibles\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  Collectibles\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/products?category=gaming\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  Gaming\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/customize\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  Custom Designs\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          {/* Support Links */}\n          <div>\n            <h3 className=\"text-lg font-medium mb-4\">Support</h3>\n            <ul className=\"space-y-3\">\n              <li>\n                <Link href=\"/faq\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  FAQ\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/shipping\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  Shipping & Returns\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/care\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  Care Instructions\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  Contact Us\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/track-order\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  Track Your Order\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          {/* Newsletter */}\n          <div>\n            <h3 className=\"text-lg font-medium mb-4\">Stay Updated</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Subscribe to our newsletter for exclusive deals, design inspiration, and early access to new products.\n            </p>\n            <div className=\"space-y-3\">\n              <Input \n                type=\"email\" \n                placeholder=\"Your email address\" \n                className=\"w-full\"\n              />\n              <Button className=\"w-full\">Subscribe</Button>\n              <p className=\"text-xs text-muted-foreground\">\n                By subscribing, you agree to our Privacy Policy and consent to receive updates from our company.\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        <Separator className=\"my-8\" />\n        \n        <div className=\"flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-sm text-muted-foreground\">\n            &copy; {new Date().getFullYear()} 3D Print Wonders. All rights reserved.\n          </p>\n          <div className=\"flex space-x-4 mt-4 md:mt-0\">\n            <Link href=\"/privacy\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\">\n              Privacy Policy\n            </Link>\n            <Link href=\"/terms\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\">\n              Terms of Service\n            </Link>\n            <Link href=\"/sitemap\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\">\n              Sitemap\n            </Link>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6776},"client/src/components/layout/Navbar.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/context/AuthContext';\nimport { useCart } from '@/context/CartContext';\nimport { useTheme } from '@/context/ThemeContext';\nimport { useCurrency } from '@/context/CurrencyContext';\nimport CurrencySelector from '@/components/currency/CurrencySelector';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Separator } from '@/components/ui/separator';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  Search,\n  ShoppingCart,\n  User,\n  Heart,\n  Menu,\n  X,\n  Sun,\n  Moon,\n  LogOut,\n  Package\n} from 'lucide-react';\n\nexport default function Navbar() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [location] = useLocation();\n  const { isAuthenticated, user, logout } = useAuth();\n  const { itemCount } = useCart();\n  const { theme, toggleTheme } = useTheme();\n  const { currency } = useCurrency();\n\n  // Handle scroll effect\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 10);\n    };\n    \n    window.addEventListener('scroll', handleScroll);\n    \n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <header className={`sticky top-0 z-50 w-full ${\n      isScrolled ? \n      'bg-background/80 backdrop-blur-md border-b' : \n      'bg-background'\n    } transition-all duration-200`}>\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex h-16 items-center justify-between\">\n          {/* Logo */}\n          <div className=\"flex-shrink-0\">\n            <Link href=\"/\" className=\"flex items-center\">\n              <span className=\"text-2xl font-bold font-['Space_Grotesk'] text-primary\">3D<span className=\"text-orange-500\">Print</span><span className=\"text-teal-500\">Wonders</span></span>\n            </Link>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex md:items-center md:space-x-8\">\n            <Link href=\"/\" className={`text-sm font-medium ${\n                location === '/' \n                ? 'text-foreground border-b-2 border-primary' \n                : 'text-muted-foreground hover:text-foreground transition-colors'\n              } px-2 py-1`}>\n                Home\n            </Link>\n            <Link href=\"/products\" className={`text-sm font-medium ${\n                location === '/products' \n                ? 'text-foreground border-b-2 border-primary' \n                : 'text-muted-foreground hover:text-foreground transition-colors'\n              } px-2 py-1`}>\n                Products\n            </Link>\n            <Link href=\"/customize\" className={`text-sm font-medium ${\n                location === '/customize' \n                ? 'text-foreground border-b-2 border-primary' \n                : 'text-muted-foreground hover:text-foreground transition-colors'\n              } px-2 py-1`}>\n                Customize\n            </Link>\n          </nav>\n          \n          {/* Search, Cart, and Account - Desktop */}\n          <div className=\"hidden md:flex md:items-center md:space-x-4\">\n            {/* Search */}\n            <div className=\"relative\">\n              <Input \n                type=\"text\" \n                placeholder=\"Search products...\" \n                className=\"w-64 pl-10 rounded-full h-9\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            </div>\n            \n            {/* Currency Selector */}\n            <CurrencySelector />\n            \n            {/* Theme Toggle */}\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"rounded-full\" \n              onClick={toggleTheme}\n              aria-label=\"Toggle theme\"\n            >\n              {theme === 'dark' ? (\n                <Sun className=\"h-5 w-5\" />\n              ) : (\n                <Moon className=\"h-5 w-5\" />\n              )}\n            </Button>\n            \n            {/* Wishlist */}\n            <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full\" asChild>\n              <Link href=\"/wishlist\">\n                <Heart className=\"h-5 w-5\" />\n              </Link>\n            </Button>\n            \n            {/* Cart */}\n            <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full relative\" asChild>\n              <Link href=\"/cart\">\n                <ShoppingCart className=\"h-5 w-5\" />\n                {itemCount > 0 && (\n                  <span className=\"absolute -top-1 -right-1 bg-primary text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                    {itemCount}\n                  </span>\n                )}\n              </Link>\n            </Button>\n            \n            {/* Account */}\n            {isAuthenticated ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full\">\n                    <Avatar className=\"h-8 w-8 border-2 border-primary\">\n                      <AvatarFallback className=\"bg-primary/10 text-primary\">\n                        {user?.username?.charAt(0).toUpperCase() || 'U'}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/profile\">\n                      <div className=\"flex items-center\">\n                        <User className=\"mr-2 h-4 w-4\" />\n                        <span>Profile</span>\n                      </div>\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/profile/orders\">\n                      <div className=\"flex items-center\">\n                        <Package className=\"mr-2 h-4 w-4\" />\n                        <span>Orders</span>\n                      </div>\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={logout}>\n                    <div className=\"flex items-center\">\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      <span>Log Out</span>\n                    </div>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <Button variant=\"default\" asChild>\n                <Link href=\"/login\">Sign In</Link>\n              </Button>\n            )}\n          </div>\n          \n          {/* Mobile menu buttons */}\n          <div className=\"flex items-center md:hidden space-x-2\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full relative\" asChild>\n              <Link href=\"/cart\">\n                <ShoppingCart className=\"h-5 w-5\" />\n                {itemCount > 0 && (\n                  <span className=\"absolute -top-1 -right-1 bg-primary text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                    {itemCount}\n                  </span>\n                )}\n              </Link>\n            </Button>\n            \n            <Sheet>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\">\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-[300px] sm:w-[350px]\">\n                <div className=\"flex flex-col h-full py-6\">\n                  <div className=\"flex justify-between items-center mb-8\">\n                    <Link href=\"/\" className=\"flex items-center\">\n                      <span className=\"text-xl font-bold font-['Space_Grotesk'] text-primary\">3D<span className=\"text-orange-500\">Print</span><span className=\"text-teal-500\">Wonders</span></span>\n                    </Link>\n                  </div>\n                  \n                  {/* Mobile Search */}\n                  <div className=\"relative mb-6\">\n                    <Input \n                      type=\"text\" \n                      placeholder=\"Search products...\" \n                      className=\"w-full pl-10\"\n                    />\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  </div>\n                  \n                  <nav className=\"flex flex-col space-y-4\">\n                    <Link href=\"/\" className=\"text-base font-medium hover:text-primary transition-colors\">\n                      Home\n                    </Link>\n                    <Link href=\"/products\" className=\"text-base font-medium hover:text-primary transition-colors\">\n                      Products\n                    </Link>\n                    <Link href=\"/customize\" className=\"text-base font-medium hover:text-primary transition-colors\">\n                      Customize\n                    </Link>\n                    <Link href=\"/wishlist\" className=\"text-base font-medium hover:text-primary transition-colors\">\n                      Wishlist\n                    </Link>\n                  </nav>\n                  \n                  <Separator className=\"my-6\" />\n                  \n                  {/* Currency and Theme - Mobile */}\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <div className=\"flex items-center\">\n                      <span className=\"text-sm font-medium mr-3\">Currency:</span>\n                      <CurrencySelector />\n                    </div>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"icon\" \n                      className=\"rounded-full\" \n                      onClick={toggleTheme}\n                      aria-label=\"Toggle theme\"\n                    >\n                      {theme === 'dark' ? (\n                        <Sun className=\"h-5 w-5\" />\n                      ) : (\n                        <Moon className=\"h-5 w-5\" />\n                      )}\n                    </Button>\n                  </div>\n                  \n                  {/* Account Section */}\n                  {isAuthenticated ? (\n                    <div className=\"mt-auto space-y-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Avatar className=\"h-10 w-10 border-2 border-primary\">\n                          <AvatarFallback className=\"bg-primary/10 text-primary\">\n                            {user?.username?.charAt(0).toUpperCase() || 'U'}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-medium\">{user?.username}</p>\n                          <p className=\"text-sm text-muted-foreground\">{user?.email}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Button variant=\"outline\" className=\"w-full justify-start\" asChild>\n                          <Link href=\"/profile\">\n                            <User className=\"mr-2 h-4 w-4\" />\n                            Profile\n                          </Link>\n                        </Button>\n                        <Button variant=\"outline\" className=\"w-full justify-start\" asChild>\n                          <Link href=\"/profile/orders\">\n                            <Package className=\"mr-2 h-4 w-4\" />\n                            Orders\n                          </Link>\n                        </Button>\n                        <Button variant=\"destructive\" className=\"w-full justify-start\" onClick={logout}>\n                          <LogOut className=\"mr-2 h-4 w-4\" />\n                          Log Out\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"mt-auto space-y-3\">\n                      <Button variant=\"default\" className=\"w-full\" asChild>\n                        <Link href=\"/login\">Sign In</Link>\n                      </Button>\n                      <Button variant=\"outline\" className=\"w-full\" asChild>\n                        <Link href=\"/register\">Create Account</Link>\n                      </Button>\n                    </div>\n                  )}\n                  \n                  {/* Currency and Theme - Mobile */}\n                  <div className=\"mt-6 pt-6 border-t space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium\">Select Currency</span>\n                      <CurrencySelector />\n                    </div>\n                    \n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full justify-between\" \n                      onClick={toggleTheme}\n                    >\n                      <span>Toggle Theme</span>\n                      {theme === 'dark' ? (\n                        <Sun className=\"h-4 w-4\" />\n                      ) : (\n                        <Moon className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":14024},"client/src/components/layout/ThemeProvider.tsx":{"content":"import { ThemeProvider as NextThemesProvider } from 'next-themes';\nimport { ReactNode } from 'react';\nimport { ThemeProvider as CustomThemeProvider } from '@/context/ThemeContext';\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  return (\n    <NextThemesProvider attribute=\"class\" defaultTheme=\"dark\" enableSystem>\n      <CustomThemeProvider>\n        {children}\n      </CustomThemeProvider>\n    </NextThemesProvider>\n  );\n}\n","size_bytes":449},"client/src/components/product/ProductFilter.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Slider } from '@/components/ui/slider';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion';\nimport { ChevronDown, FilterX, SlidersHorizontal } from 'lucide-react';\nimport { useCurrency } from '@/context/CurrencyContext';\n\ninterface Category {\n  id: number;\n  name: string;\n  slug: string;\n  count?: number;\n}\n\ninterface ProductFilterProps {\n  categories: Category[];\n  filters: {\n    category?: string;\n    minPrice?: number;\n    maxPrice?: number;\n    sort?: string;\n    search?: string;\n  };\n  onChange: (filters: any) => void;\n  onClose?: () => void;\n  isMobile?: boolean;\n}\n\nexport default function ProductFilter({\n  categories,\n  filters,\n  onChange,\n  onClose,\n  isMobile = false\n}: ProductFilterProps) {\n  const [activeFilters, setActiveFilters] = useState(filters);\n  const [priceRange, setPriceRange] = useState<[number, number]>([\n    filters.minPrice || 0,\n    filters.maxPrice || 1000\n  ]);\n  const { formatPrice } = useCurrency();\n  const [location] = useLocation();\n  const searchParams = new URLSearchParams(location.split('?')[1] || '');\n  \n  // Update price range when filters change\n  useEffect(() => {\n    setPriceRange([\n      filters.minPrice || 0,\n      filters.maxPrice || 1000\n    ]);\n    setActiveFilters(filters);\n  }, [filters]);\n  \n  // Handle category change\n  const handleCategoryChange = (category: string | undefined) => {\n    setActiveFilters(prev => {\n      const newFilters = { ...prev, category };\n      onChange(newFilters);\n      return newFilters;\n    });\n  };\n  \n  // Handle price range change\n  const handlePriceChange = (value: [number, number]) => {\n    setPriceRange(value);\n  };\n  \n  // Apply price range after sliding ends\n  const applyPriceRange = () => {\n    setActiveFilters(prev => {\n      const newFilters = { \n        ...prev, \n        minPrice: priceRange[0], \n        maxPrice: priceRange[1] \n      };\n      onChange(newFilters);\n      return newFilters;\n    });\n  };\n  \n  // Handle sort change\n  const handleSortChange = (sort: string) => {\n    setActiveFilters(prev => {\n      const newFilters = { ...prev, sort };\n      onChange(newFilters);\n      return newFilters;\n    });\n  };\n  \n  // Reset all filters\n  const resetFilters = () => {\n    const newFilters = {\n      category: undefined,\n      minPrice: 0,\n      maxPrice: 1000,\n      sort: 'featured'\n    };\n    \n    setActiveFilters(newFilters);\n    setPriceRange([0, 1000]);\n    onChange(newFilters);\n    \n    if (onClose) {\n      onClose();\n    }\n  };\n  \n  // Count active filters\n  const countActiveFilters = () => {\n    let count = 0;\n    if (activeFilters.category) count++;\n    if (activeFilters.minPrice && activeFilters.minPrice > 0) count++;\n    if (activeFilters.maxPrice && activeFilters.maxPrice < 1000) count++;\n    if (activeFilters.sort && activeFilters.sort !== 'featured') count++;\n    return count;\n  };\n  \n  // Get active category name\n  const getActiveCategoryName = () => {\n    if (!activeFilters.category) return null;\n    const category = categories.find(c => c.slug === activeFilters.category);\n    return category ? category.name : null;\n  };\n  \n  // Filter content\n  const filterContent = (\n    <div className={isMobile ? 'pb-24' : ''}>\n      {/* Filter Header */}\n      <div className=\"flex justify-between items-center mb-4\">\n        <div className=\"flex items-center\">\n          <SlidersHorizontal className=\"h-5 w-5 mr-2\" />\n          <h3 className=\"font-medium text-lg\">Filters</h3>\n        </div>\n        {countActiveFilters() > 0 && (\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={resetFilters}\n            className=\"text-muted-foreground hover:text-destructive\"\n          >\n            <FilterX className=\"h-4 w-4 mr-1\" />\n            Reset\n          </Button>\n        )}\n      </div>\n      \n      {/* Active Filters */}\n      {countActiveFilters() > 0 && (\n        <div className=\"mb-6\">\n          <p className=\"text-sm text-muted-foreground mb-2\">Active Filters:</p>\n          <div className=\"flex flex-wrap gap-2\">\n            {activeFilters.category && (\n              <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                Category: {getActiveCategoryName()}\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  className=\"h-4 w-4 p-0 ml-1\" \n                  onClick={() => handleCategoryChange(undefined)}\n                >\n                  <span className=\"sr-only\">Remove</span>\n                  <ChevronDown className=\"h-3 w-3 rotate-180\" />\n                </Button>\n              </Badge>\n            )}\n            \n            {(activeFilters.minPrice !== 0 || activeFilters.maxPrice !== 1000) && (\n              <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                Price: {formatPrice(activeFilters.minPrice || 0)} - {formatPrice(activeFilters.maxPrice || 1000)}\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  className=\"h-4 w-4 p-0 ml-1\"\n                  onClick={() => {\n                    setPriceRange([0, 1000]);\n                    setActiveFilters(prev => {\n                      const newFilters = { ...prev, minPrice: 0, maxPrice: 1000 };\n                      onChange(newFilters);\n                      return newFilters;\n                    });\n                  }}\n                >\n                  <span className=\"sr-only\">Remove</span>\n                  <ChevronDown className=\"h-3 w-3 rotate-180\" />\n                </Button>\n              </Badge>\n            )}\n            \n            {activeFilters.sort && activeFilters.sort !== 'featured' && (\n              <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                Sort: {activeFilters.sort.replace('-', ' ')}\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  className=\"h-4 w-4 p-0 ml-1\"\n                  onClick={() => handleSortChange('featured')}\n                >\n                  <span className=\"sr-only\">Remove</span>\n                  <ChevronDown className=\"h-3 w-3 rotate-180\" />\n                </Button>\n              </Badge>\n            )}\n          </div>\n        </div>\n      )}\n      \n      <Accordion type=\"multiple\" defaultValue={['categories', 'price', 'sort']} className=\"space-y-4\">\n        {/* Categories */}\n        <AccordionItem value=\"categories\" className=\"border rounded-lg px-4\">\n          <AccordionTrigger className=\"py-3\">\n            <span className=\"font-medium\">Categories</span>\n          </AccordionTrigger>\n          <AccordionContent className=\"pt-2 pb-3\">\n            <div className=\"space-y-2\">\n              <div \n                className={`flex items-center justify-between px-2 py-1 rounded-md cursor-pointer hover:bg-muted ${!activeFilters.category ? 'bg-muted' : ''}`}\n                onClick={() => handleCategoryChange(undefined)}\n              >\n                <Label htmlFor=\"all-categories\" className=\"cursor-pointer w-full\">\n                  All Categories\n                </Label>\n                <Badge variant=\"outline\">{categories.reduce((sum, c) => sum + (c.count || 0), 0)}</Badge>\n              </div>\n              \n              {categories.map((category) => (\n                <div \n                  key={category.id}\n                  className={`flex items-center justify-between px-2 py-1 rounded-md cursor-pointer hover:bg-muted ${activeFilters.category === category.slug ? 'bg-muted' : ''}`}\n                  onClick={() => handleCategoryChange(category.slug)}\n                >\n                  <Label htmlFor={`category-${category.slug}`} className=\"cursor-pointer w-full capitalize\">\n                    {category.name}\n                  </Label>\n                  <Badge variant=\"outline\">{category.count || 0}</Badge>\n                </div>\n              ))}\n            </div>\n          </AccordionContent>\n        </AccordionItem>\n        \n        {/* Price Range */}\n        <AccordionItem value=\"price\" className=\"border rounded-lg px-4\">\n          <AccordionTrigger className=\"py-3\">\n            <span className=\"font-medium\">Price Range</span>\n          </AccordionTrigger>\n          <AccordionContent className=\"pt-2 pb-3\">\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"font-medium\">\n                  {formatPrice(priceRange[0])}\n                </div>\n                <div className=\"font-medium\">\n                  {formatPrice(priceRange[1])}\n                </div>\n              </div>\n              \n              <Slider\n                value={priceRange}\n                min={0}\n                max={1000}\n                step={10}\n                onValueChange={handlePriceChange}\n                onValueCommit={applyPriceRange}\n                className=\"py-4\"\n              />\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"min-price\">Min Price</Label>\n                  <Input\n                    id=\"min-price\"\n                    type=\"number\"\n                    min={0}\n                    max={priceRange[1]}\n                    value={priceRange[0]}\n                    onChange={(e) => {\n                      const value = parseInt(e.target.value);\n                      if (!isNaN(value) && value >= 0 && value <= priceRange[1]) {\n                        handlePriceChange([value, priceRange[1]]);\n                      }\n                    }}\n                    onBlur={applyPriceRange}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"max-price\">Max Price</Label>\n                  <Input\n                    id=\"max-price\"\n                    type=\"number\"\n                    min={priceRange[0]}\n                    max={1000}\n                    value={priceRange[1]}\n                    onChange={(e) => {\n                      const value = parseInt(e.target.value);\n                      if (!isNaN(value) && value >= priceRange[0] && value <= 1000) {\n                        handlePriceChange([priceRange[0], value]);\n                      }\n                    }}\n                    onBlur={applyPriceRange}\n                  />\n                </div>\n              </div>\n            </div>\n          </AccordionContent>\n        </AccordionItem>\n        \n        {/* Sort By */}\n        <AccordionItem value=\"sort\" className=\"border rounded-lg px-4\">\n          <AccordionTrigger className=\"py-3\">\n            <span className=\"font-medium\">Sort By</span>\n          </AccordionTrigger>\n          <AccordionContent className=\"pt-2 pb-3\">\n            <RadioGroup \n              value={activeFilters.sort || 'featured'} \n              onValueChange={handleSortChange}\n              className=\"space-y-2\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"featured\" id=\"sort-featured\" />\n                <Label htmlFor=\"sort-featured\">Featured</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"price-asc\" id=\"sort-price-asc\" />\n                <Label htmlFor=\"sort-price-asc\">Price: Low to High</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"price-desc\" id=\"sort-price-desc\" />\n                <Label htmlFor=\"sort-price-desc\">Price: High to Low</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"newest\" id=\"sort-newest\" />\n                <Label htmlFor=\"sort-newest\">Newest First</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"rating\" id=\"sort-rating\" />\n                <Label htmlFor=\"sort-rating\">Highest Rated</Label>\n              </div>\n            </RadioGroup>\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n    </div>\n  );\n  \n  return (\n    <>\n      {isMobile ? (\n        <div className=\"mt-4 mb-6\">\n          {filterContent}\n        </div>\n      ) : (\n        <div className=\"sticky top-20\">\n          {filterContent}\n        </div>\n      )}\n    </>\n  );\n}","size_bytes":12923},"client/src/components/product/ProductGrid.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardFooter } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Eye, ShoppingCart, Star } from 'lucide-react';\nimport { useCart } from '@/context/CartContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { useCurrency } from '@/context/CurrencyContext';\n\n// Define types locally until schema is properly connected\ninterface Product {\n  id: number;\n  name: string;\n  slug: string;\n  description?: string;\n  price: number;\n  imageUrl?: string;\n  category?: string;\n  categorySlug?: string;\n  rating?: number;\n  reviewCount?: number;\n  featured?: boolean;\n  inStock?: boolean;\n}\n\ninterface ProductGridProps {\n  products: Product[];\n  loading?: boolean;\n  layout?: 'grid' | 'list';\n  showCategory?: boolean;\n}\n\nexport default function ProductGrid({\n  products,\n  loading = false,\n  layout = 'grid',\n  showCategory = true\n}: ProductGridProps) {\n  const { addItem } = useCart();\n  const { formatPrice } = useCurrency();\n  const { toast } = useToast();\n  const [addingToCart, setAddingToCart] = useState<Record<number, boolean>>({});\n\n  // Determine grid columns based on layout\n  const gridCols = layout === 'grid' \n    ? 'grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4' \n    : 'grid-cols-1';\n\n  // Handle add to cart\n  const handleAddToCart = async (product: Product) => {\n    if (addingToCart[product.id]) return;\n    \n    setAddingToCart(prev => ({ ...prev, [product.id]: true }));\n    \n    try {\n      await addItem(product.id, 1);\n      toast({\n        title: \"Added to Cart\",\n        description: `${product.name} has been added to your cart.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Could not add item to cart. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setAddingToCart(prev => ({ ...prev, [product.id]: false }));\n    }\n  };\n\n  if (loading) {\n    // Loading skeleton\n    return (\n      <div className={`grid ${gridCols} gap-6`}>\n        {Array.from({ length: 8 }).map((_, i) => (\n          <Card key={i} className=\"overflow-hidden h-full animate-pulse\">\n            <div className=\"aspect-square bg-muted\"></div>\n            <CardContent className=\"p-4\">\n              <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n              <div className=\"h-4 bg-muted rounded w-1/2 mb-4\"></div>\n              <div className=\"h-6 bg-muted rounded w-1/3\"></div>\n            </CardContent>\n            <CardFooter className=\"p-4 pt-0\">\n              <div className=\"h-10 bg-muted rounded w-full\"></div>\n            </CardFooter>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (products.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"text-muted-foreground mb-4\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"h-12 w-12 mx-auto\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={1.5}\n              d=\"M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n            />\n          </svg>\n        </div>\n        <h3 className=\"text-lg font-semibold mb-1\">No Products Found</h3>\n        <p className=\"text-muted-foreground mb-6\">\n          Try adjusting your filters or search criteria.\n        </p>\n        <Button variant=\"outline\" asChild>\n          <Link href=\"/products\">Clear Filters</Link>\n        </Button>\n      </div>\n    );\n  }\n\n  // Render products grid\n  return (\n    <div className={`grid ${gridCols} gap-6`}>\n      {products.map((product) => (\n        <Card \n          key={product.id} \n          className=\"overflow-hidden h-full border transition-all duration-200 hover:shadow-md\"\n        >\n          <div className=\"relative\">\n            <Link href={`/products/${product.slug}`}>\n              <div className=\"aspect-square relative overflow-hidden group\">\n                <div \n                  className=\"w-full h-full bg-cover bg-center transition-transform duration-300 group-hover:scale-105\"\n                  style={{ \n                    backgroundImage: product.imageUrl \n                      ? `url(${product.imageUrl})` \n                      : 'url(https://placehold.co/300x300/f1f5f9/64748b?text=No+Image)',\n                    backgroundSize: 'cover'\n                  }}\n                />\n                <div className=\"absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                  <Button variant=\"secondary\" size=\"sm\" className=\"mx-1\">\n                    <Eye className=\"h-4 w-4 mr-2\" /> Quick View\n                  </Button>\n                </div>\n              </div>\n            </Link>\n            {product.featured && (\n              <Badge className=\"absolute top-3 left-3 bg-primary text-primary-foreground\">\n                Featured\n              </Badge>\n            )}\n            {!product.inStock && (\n              <Badge variant=\"destructive\" className=\"absolute top-3 right-3\">\n                Out of Stock\n              </Badge>\n            )}\n          </div>\n          \n          <CardContent className=\"p-4\">\n            {showCategory && product.category && (\n              <Link href={`/products?category=${product.categorySlug || product.category.toLowerCase()}`}>\n                <Badge variant=\"outline\" className=\"mb-2 capitalize\">\n                  {product.category.replace('-', ' ')}\n                </Badge>\n              </Link>\n            )}\n            \n            <Link href={`/products/${product.slug}`}>\n              <h3 className=\"font-medium text-lg hover:underline line-clamp-1\">\n                {product.name}\n              </h3>\n            </Link>\n            \n            {product.description && (\n              <p className=\"text-sm text-muted-foreground mt-1 line-clamp-2\">\n                {product.description}\n              </p>\n            )}\n            \n            <div className=\"flex justify-between items-center mt-2\">\n              <div className=\"font-semibold text-primary\">\n                {formatPrice(product.price)}\n              </div>\n              \n              {product.rating && (\n                <div className=\"flex items-center text-amber-500\">\n                  <Star className=\"fill-current h-4 w-4 mr-1\" />\n                  <span className=\"text-sm font-medium\">{product.rating}</span>\n                  {product.reviewCount && (\n                    <span className=\"text-xs text-muted-foreground ml-1\">\n                      ({product.reviewCount})\n                    </span>\n                  )}\n                </div>\n              )}\n            </div>\n          </CardContent>\n          \n          <CardFooter className=\"p-4 pt-0\">\n            <Button \n              className=\"w-full\" \n              disabled={!product.inStock || addingToCart[product.id]}\n              onClick={() => handleAddToCart(product)}\n            >\n              {addingToCart[product.id] ? (\n                <div className=\"flex items-center\">\n                  <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Adding...\n                </div>\n              ) : (\n                <>\n                  <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                  {product.inStock ? 'Add to Cart' : 'Out of Stock'}\n                </>\n              )}\n            </Button>\n          </CardFooter>\n        </Card>\n      ))}\n    </div>\n  );\n}","size_bytes":8129},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/three-viewer.tsx":{"content":"import { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport { Button } from '@/components/ui/button';\nimport { Expand, ZoomIn, ZoomOut, RotateCcw, Loader2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface ThreeViewerProps {\n  modelUrl: string;\n  className?: string;\n  height?: string;\n  backgroundColor?: string;\n  customizations?: {\n    color?: string;\n    material?: string;\n    scale?: number;\n  };\n}\n\nexport function ThreeViewer({\n  modelUrl,\n  className,\n  height = '400px',\n  backgroundColor = 'transparent',\n  customizations\n}: ThreeViewerProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  // References to Three.js objects\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const controlsRef = useRef<OrbitControls | null>(null);\n  const modelRef = useRef<THREE.Object3D | null>(null);\n  \n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    // Initialize Three.js scene\n    const width = containerRef.current.clientWidth;\n    const height = containerRef.current.clientHeight;\n    \n    // Scene\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n    \n    // If the background is not transparent, set the background color\n    if (backgroundColor !== 'transparent') {\n      scene.background = new THREE.Color(backgroundColor);\n    }\n    \n    // Camera\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.z = 5;\n    cameraRef.current = camera;\n    \n    // Renderer\n    const renderer = new THREE.WebGLRenderer({ \n      antialias: true,\n      alpha: backgroundColor === 'transparent'\n    });\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    containerRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    \n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.minDistance = 2;\n    controls.maxDistance = 10;\n    controlsRef.current = controls;\n    \n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    \n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n    \n    // Load 3D model\n    const dracoLoader = new DRACOLoader();\n    dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.5/');\n    \n    const gltfLoader = new GLTFLoader();\n    gltfLoader.setDRACOLoader(dracoLoader);\n    \n    setLoading(true);\n    gltfLoader.load(\n      modelUrl,\n      (gltf) => {\n        const model = gltf.scene;\n        \n        // Center model\n        const box = new THREE.Box3().setFromObject(model);\n        const center = box.getCenter(new THREE.Vector3());\n        model.position.x -= center.x;\n        model.position.y -= center.y;\n        model.position.z -= center.z;\n        \n        // Normalize scale\n        const size = box.getSize(new THREE.Vector3());\n        const maxDim = Math.max(size.x, size.y, size.z);\n        if (maxDim > 0) {\n          const scale = 2 / maxDim;\n          model.scale.multiplyScalar(scale);\n          \n          // Apply custom scale if provided\n          if (customizations?.scale) {\n            model.scale.multiplyScalar(customizations.scale);\n          }\n        }\n        \n        // Apply customizations\n        if (customizations?.color) {\n          model.traverse((node) => {\n            if (node instanceof THREE.Mesh && node.material) {\n              if (Array.isArray(node.material)) {\n                node.material.forEach((mat) => {\n                  if (mat.color) {\n                    mat.color.set(customizations.color!);\n                  }\n                });\n              } else if (node.material.color) {\n                node.material.color.set(customizations.color);\n              }\n            }\n          });\n        }\n        \n        scene.add(model);\n        modelRef.current = model;\n        setLoading(false);\n      },\n      (progress) => {\n        // Progress callback\n        console.log(`Loading model: ${(progress.loaded / progress.total) * 100}%`);\n      },\n      (error) => {\n        console.error('Error loading model:', error);\n        setError('Failed to load 3D model');\n        setLoading(false);\n      }\n    );\n    \n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      \n      if (controlsRef.current) {\n        controlsRef.current.update();\n      }\n      \n      if (rendererRef.current && sceneRef.current && cameraRef.current) {\n        rendererRef.current.render(sceneRef.current, cameraRef.current);\n      }\n    };\n    \n    animate();\n    \n    // Handle window resize\n    const handleResize = () => {\n      if (!containerRef.current || !cameraRef.current || !rendererRef.current) return;\n      \n      const width = containerRef.current.clientWidth;\n      const height = containerRef.current.clientHeight;\n      \n      cameraRef.current.aspect = width / height;\n      cameraRef.current.updateProjectionMatrix();\n      \n      rendererRef.current.setSize(width, height);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      \n      if (rendererRef.current && rendererRef.current.domElement && containerRef.current) {\n        containerRef.current.removeChild(rendererRef.current.domElement);\n      }\n      \n      scene.clear();\n      \n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n      }\n      \n      if (controlsRef.current) {\n        controlsRef.current.dispose();\n      }\n    };\n  }, [modelUrl, backgroundColor]);\n  \n  // Update model when customizations change\n  useEffect(() => {\n    if (!modelRef.current) return;\n    \n    // Apply color customization\n    if (customizations?.color) {\n      modelRef.current.traverse((node) => {\n        if (node instanceof THREE.Mesh && node.material) {\n          if (Array.isArray(node.material)) {\n            node.material.forEach((mat) => {\n              if (mat.color) {\n                mat.color.set(customizations.color!);\n              }\n            });\n          } else if (node.material.color) {\n            node.material.color.set(customizations.color);\n          }\n        }\n      });\n    }\n    \n    // Apply scale customization\n    if (customizations?.scale && modelRef.current) {\n      // Reset scale first\n      const box = new THREE.Box3().setFromObject(modelRef.current);\n      const size = box.getSize(new THREE.Vector3());\n      const maxDim = Math.max(size.x, size.y, size.z);\n      if (maxDim > 0) {\n        const baseScale = 2 / maxDim;\n        modelRef.current.scale.set(baseScale, baseScale, baseScale);\n        modelRef.current.scale.multiplyScalar(customizations.scale);\n      }\n    }\n  }, [customizations]);\n  \n  // Control functions\n  const handleZoomIn = () => {\n    if (controlsRef.current) {\n      controlsRef.current.dollyIn(1.2);\n      controlsRef.current.update();\n    }\n  };\n  \n  const handleZoomOut = () => {\n    if (controlsRef.current) {\n      controlsRef.current.dollyOut(1.2);\n      controlsRef.current.update();\n    }\n  };\n  \n  const handleReset = () => {\n    if (controlsRef.current && cameraRef.current) {\n      controlsRef.current.reset();\n      cameraRef.current.position.z = 5;\n    }\n  };\n  \n  const handleFullscreen = () => {\n    if (containerRef.current) {\n      if (document.fullscreenElement) {\n        document.exitFullscreen();\n      } else {\n        containerRef.current.requestFullscreen();\n      }\n    }\n  };\n  \n  return (\n    <div className={cn(\"relative rounded-lg overflow-hidden border bg-background\", className)} style={{ height }}>\n      <div ref={containerRef} className=\"w-full h-full\">\n        {loading && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-background/50\">\n            <div className=\"flex flex-col items-center\">\n              <Loader2 className=\"h-10 w-10 animate-spin text-primary\" />\n              <p className=\"mt-2 text-sm text-muted-foreground\">Loading 3D Model...</p>\n            </div>\n          </div>\n        )}\n        \n        {error && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-background/80\">\n            <div className=\"max-w-md p-6 text-center\">\n              <p className=\"text-destructive mb-2\">Failed to load 3D model</p>\n              <p className=\"text-sm text-muted-foreground\">{error}</p>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Controls */}\n      <div className=\"absolute bottom-4 left-0 right-0 flex justify-center\">\n        <div className=\"flex items-center space-x-2 p-2 rounded-full bg-background/80 backdrop-blur-sm border\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"rounded-full h-8 w-8\"\n            onClick={handleZoomOut}\n            title=\"Zoom out\"\n          >\n            <ZoomOut className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"rounded-full h-8 w-8\"\n            onClick={handleReset}\n            title=\"Reset view\"\n          >\n            <RotateCcw className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"rounded-full h-8 w-8\"\n            onClick={handleZoomIn}\n            title=\"Zoom in\"\n          >\n            <ZoomIn className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n      \n      {/* Fullscreen button */}\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"absolute top-2 right-2 rounded-full h-8 w-8 bg-background/80 backdrop-blur-sm\"\n        onClick={handleFullscreen}\n        title=\"Toggle fullscreen\"\n      >\n        <Expand className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n}\n","size_bytes":10491},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}